{
  "apoc": {
    "scoring": {
      "existence": {
        "name": "apoc.scoring.existence(5, true) returns the provided score if true, 0 if false\n",
        "description": "apoc.scoring.existence(score :: INTEGER?, exists :: BOOLEAN?) :: (FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.scoring/apoc.scoring.existence/"
      },
      "pareto": {
        "name": "apoc.scoring.pareto(10, 20, 100, 11) applies a Pareto scoring function over the inputs\n",
        "description": "apoc.scoring.pareto(minimumThreshold :: INTEGER?, eightyPercentValue :: INTEGER?, maximumValue :: INTEGER?, score :: INTEGER?) :: (FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.scoring/apoc.scoring.pareto/"
      }
    },
    "algo": {
      "dijkstra": {
        "name": "apoc.algo.dijkstra(startNode, endNode, 'KNOWS|<WORKS_WITH|IS_MANAGER_OF>', 'distance', defaultValue, numberOfWantedResults) YIELD path, weight - run dijkstra with relationship property name as cost function\n",
        "description": "apoc.algo.dijkstra(startNode :: NODE?, endNode :: NODE?, relationshipTypesAndDirections :: STRING?, weightPropertyName :: STRING?, defaultWeight = NaN :: FLOAT?, numberOfWantedPaths = 1 :: INTEGER?) :: (path :: PATH?, weight :: FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.algo/apoc.algo.dijkstra/"
      },
      "dijkstraWithDefaultWeight": {
        "name": "apoc.algo.dijkstraWithDefaultWeight(startNode, endNode, 'KNOWS|<WORKS_WITH|IS_MANAGER_OF>', 'distance', 10) YIELD path, weight - run dijkstra with relationship property name as cost function and a default weight if the property does not exist\n",
        "description": "apoc.algo.dijkstraWithDefaultWeight(startNode :: NODE?, endNode :: NODE?, relationshipTypesAndDirections :: STRING?, weightPropertyName :: STRING?, defaultWeight :: FLOAT?) :: (path :: PATH?, weight :: FLOAT?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.algo/apoc.algo.dijkstraWithDefaultWeight/"
      },
      "aStar": {
        "name": "apoc.algo.aStar(startNode, endNode, 'KNOWS|<WORKS_WITH|IS_MANAGER_OF>', 'distance','lat','lon') YIELD path, weight - run A* with relationship property name as cost function\n",
        "description": "apoc.algo.aStar(startNode :: NODE?, endNode :: NODE?, relationshipTypesAndDirections :: STRING?, weightPropertyName :: STRING?, latPropertyName :: STRING?, lonPropertyName :: STRING?) :: (path :: PATH?, weight :: FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.algo/apoc.algo.aStar/"
      },
      "aStarConfig": {
        "name": "apoc.algo.aStar(startNode, endNode, 'KNOWS|<WORKS_WITH|IS_MANAGER_OF>', {weight:'dist',default:10,x:'lon',y:'lat'}) YIELD path, weight - run A* with relationship property name as cost function\n",
        "description": "apoc.algo.aStarConfig(startNode :: NODE?, endNode :: NODE?, relationshipTypesAndDirections :: STRING?, config :: MAP?) :: (path :: PATH?, weight :: FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.algo/apoc.algo.aStarConfig/"
      },
      "allSimplePaths": {
        "name": "apoc.algo.allSimplePaths(startNode, endNode, 'KNOWS|<WORKS_WITH|IS_MANAGER_OF>', 5) YIELD path, weight - run allSimplePaths with relationships given and maxNodes\n",
        "description": "apoc.algo.allSimplePaths(startNode :: NODE?, endNode :: NODE?, relationshipTypesAndDirections :: STRING?, maxNodes :: INTEGER?) :: (path :: PATH?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.algo/apoc.algo.allSimplePaths/"
      },
      "cover": {
        "name": "apoc.algo.cover(nodes) yield rel - returns all relationships between this set of nodes\n",
        "description": "apoc.algo.cover(nodes :: ANY?) :: (rel :: RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.algo/apoc.algo.cover/"
      }
    },
    "metrics": {
      "get": {
        "name": "apoc.metrics.get(metricName, {}) - retrieve a system metric by its metric name. Additional configuration options may be passed matching the options available for apoc.load.csv.\n",
        "description": "apoc.metrics.get(metricName :: STRING?, config = {} :: MAP?) :: (timestamp :: INTEGER?, metric :: STRING?, map :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.metrics/apoc.metrics.get/"
      },
      "storage": {
        "name": "apoc.metrics.storage(directorySetting) - retrieve storage metrics about the devices Neo4j uses for data storage. directorySetting may be any valid neo4j directory setting name, such as 'dbms.directories.data'.  If null is provided as a directorySetting, you will get back all available directory settings.  For a list of available directory settings, see the Neo4j operations manual reference on configuration settings.   Directory settings are **not** paths, they are a neo4j.conf setting key name\n",
        "description": "apoc.metrics.storage(directorySetting :: STRING?) :: (setting :: STRING?, freeSpaceBytes :: INTEGER?, totalSpaceBytes :: INTEGER?, usableSpaceBytes :: INTEGER?, percentFree :: FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.metrics/apoc.metrics.storage/"
      },
      "list": {
        "name": "apoc.metrics.list() - get a list of available metrics\n",
        "description": "apoc.metrics.list() :: (name :: STRING?, lastUpdated :: INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.metrics/apoc.metrics.list/"
      }
    },
    "couchbase": {
      "upsert": {
        "name": "apoc.couchbase.upsert(hostOrKey, bucket, documentId, jsonDocument) yield id, expiry, cas, mutationToken, content - insert or overwrite a couchbase json document with its unique ID.\n",
        "description": "apoc.couchbase.upsert(hostOrKey :: STRING?, bucket :: STRING?, documentId :: STRING?, json :: STRING?) :: (content :: MAP?, id :: STRING?, expiry :: INTEGER?, cas :: INTEGER?, mutationToken :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.couchbase/apoc.couchbase.upsert/"
      },
      "prepend": {
        "name": "apoc.couchbase.prepend(hostOrKey, bucket, documentId, content) yield id, expiry, cas, mutationToken, content - prepend a couchbase json document to an existing one.\n",
        "description": "apoc.couchbase.prepend(hostOrKey :: STRING?, bucket :: STRING?, documentId :: STRING?, content :: BYTEARRAY?) :: (content :: BYTEARRAY?, id :: STRING?, expiry :: INTEGER?, cas :: INTEGER?, mutationToken :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.couchbase/apoc.couchbase.prepend/"
      },
      "insert": {
        "name": "apoc.couchbase.insert(hostOrKey, bucket, documentId, jsonDocument) yield id, expiry, cas, mutationToken, content - insert a couchbase json document with its unique ID.\n",
        "description": "apoc.couchbase.insert(hostOrKey :: STRING?, bucket :: STRING?, documentId :: STRING?, json :: STRING?) :: (content :: MAP?, id :: STRING?, expiry :: INTEGER?, cas :: INTEGER?, mutationToken :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.couchbase/apoc.couchbase.insert/"
      },
      "append": {
        "name": "apoc.couchbase.append(hostOrKey, bucket, documentId, content) yield id, expiry, cas, mutationToken, content - append a couchbase json document to an existing one.\n",
        "description": "apoc.couchbase.append(hostOrKey :: STRING?, bucket :: STRING?, documentId :: STRING?, content :: BYTEARRAY?) :: (content :: BYTEARRAY?, id :: STRING?, expiry :: INTEGER?, cas :: INTEGER?, mutationToken :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.couchbase/apoc.couchbase.append/"
      },
      "posParamsQuery": {
        "name": "apoc.couchbase.posParamsQuery(hostOrKey, bucket, statement, params) yield queryResult - executes a N1QL statement with positional parameters.\n",
        "description": "apoc.couchbase.posParamsQuery(hostOrKey :: STRING?, bucket :: STRING?, statement :: STRING?, params :: LIST? OF ANY?) :: (queryResult :: LIST? OF MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.couchbase/apoc.couchbase.posParamsQuery/"
      },
      "get": {
        "name": "apoc.couchbase.get(hostOrKey, bucket, documentId) yield id, expiry, cas, mutationToken, content - retrieves a couchbase json document by its unique ID.\n",
        "description": "apoc.couchbase.get(hostOrKey :: STRING?, bucket :: STRING?, documentId :: STRING?) :: (content :: MAP?, id :: STRING?, expiry :: INTEGER?, cas :: INTEGER?, mutationToken :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.couchbase/apoc.couchbase.get/"
      },
      "query": {
        "name": "apoc.couchbase.query(hostOrKey, bucket, statement) yield queryResult - executes a plain un-parameterized N1QL statement.\n",
        "description": "apoc.couchbase.query(hostOrKey :: STRING?, bucket :: STRING?, statement :: STRING?) :: (queryResult :: LIST? OF MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.couchbase/apoc.couchbase.query/"
      },
      "replace": {
        "name": "apoc.couchbase.replace(hostOrKey, bucket, documentId, jsonDocument) yield id, expiry, cas, mutationToken, content - replace the content of the couchbase json document identified by its unique ID.\n",
        "description": "apoc.couchbase.replace(hostOrKey :: STRING?, bucket :: STRING?, documentId :: STRING?, json :: STRING?) :: (content :: MAP?, id :: STRING?, expiry :: INTEGER?, cas :: INTEGER?, mutationToken :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.couchbase/apoc.couchbase.replace/"
      },
      "namedParamsQuery": {
        "name": "apoc.couchbase.namedParamsQuery(hostkOrKey, bucket, statement, paramNames, paramValues) yield queryResult - executes a N1QL statement with named parameters.\n",
        "description": "apoc.couchbase.namedParamsQuery(hostOrKey :: STRING?, bucket :: STRING?, statement :: STRING?, paramNames :: LIST? OF STRING?, paramValues :: LIST? OF ANY?) :: (queryResult :: LIST? OF MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.couchbase/apoc.couchbase.namedParamsQuery/"
      },
      "exists": {
        "name": "apoc.couchbase.exists(hostOrKey, bucket, documentId) yield value - check whether a couchbase json document with the given ID does exist.\n",
        "description": "apoc.couchbase.exists(hostOrKey :: STRING?, bucket :: STRING?, documentId :: STRING?) :: (value :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.couchbase/apoc.couchbase.exists/"
      },
      "remove": {
        "name": "apoc.couchbase.remove(hostOrKey, bucket, documentId) yield id, expiry, cas, mutationToken, content - remove the couchbase json document identified by its unique ID.\n",
        "description": "apoc.couchbase.remove(hostOrKey :: STRING?, bucket :: STRING?, documentId :: STRING?) :: (content :: MAP?, id :: STRING?, expiry :: INTEGER?, cas :: INTEGER?, mutationToken :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.couchbase/apoc.couchbase.remove/"
      }
    },
    "export": {
      "json": {
        "name": "apoc.export.json.data(nodes,rels,file,config) - exports given nodes and relationships as json to the provided file\n",
        "description": "apoc.export.json.data(nodes :: LIST? OF NODE?, rels :: LIST? OF RELATIONSHIP?, file :: STRING?, config = {} :: MAP?) :: (file :: STRING?, source :: STRING?, format :: STRING?, nodes :: INTEGER?, relationships :: INTEGER?, properties :: INTEGER?, time :: INTEGER?, rows :: INTEGER?, batchSize :: INTEGER?, batches :: INTEGER?, done :: BOOLEAN?, data :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.export/apoc.export.json.data/"
      },
      "cypherGraph": {
        "name": "apoc.export.cypherGraph(graph,file,config) - exports given graph object incl. indexes as cypher statements to the provided file\n",
        "description": "apoc.export.cypherGraph(graph :: MAP?, file :: STRING?, config :: MAP?) :: (file :: STRING?, batches :: INTEGER?, source :: STRING?, format :: STRING?, nodes :: INTEGER?, relationships :: INTEGER?, properties :: INTEGER?, time :: INTEGER?, rows :: INTEGER?, batchSize :: INTEGER?, cypherStatements :: STRING?, nodeStatements :: STRING?, relationshipStatements :: STRING?, schemaStatements :: STRING?, cleanupStatements :: STRING?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.export/apoc.export.cypherGraph/"
      },
      "cypher": {
        "name": "apoc.export.cypher.data(nodes,rels,file,config) - exports given nodes and relationships incl. indexes as cypher statements to the provided file\n",
        "description": "apoc.export.cypher.data(nodes :: LIST? OF NODE?, rels :: LIST? OF RELATIONSHIP?, file =  :: STRING?, config = {} :: MAP?) :: (file :: STRING?, batches :: INTEGER?, source :: STRING?, format :: STRING?, nodes :: INTEGER?, relationships :: INTEGER?, properties :: INTEGER?, time :: INTEGER?, rows :: INTEGER?, batchSize :: INTEGER?, cypherStatements :: STRING?, nodeStatements :: STRING?, relationshipStatements :: STRING?, schemaStatements :: STRING?, cleanupStatements :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.export/apoc.export.cypher.data/"
      },
      "xls": {
        "name": "apoc.export.xls.all(file,config) - exports whole database as xls to the provided file\n",
        "description": "apoc.export.xls.all(file :: STRING?, config :: MAP?) :: (file :: STRING?, source :: STRING?, format :: STRING?, nodes :: INTEGER?, relationships :: INTEGER?, properties :: INTEGER?, time :: INTEGER?, rows :: INTEGER?, batchSize :: INTEGER?, batches :: INTEGER?, done :: BOOLEAN?, data :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.export/apoc.export.xls.all/"
      },
      "graphml": {
        "name": "apoc.export.graphml.data(nodes,rels,file,config) - exports given nodes and relationships as graphml to the provided file\n",
        "description": "apoc.export.graphml.data(nodes :: LIST? OF NODE?, rels :: LIST? OF RELATIONSHIP?, file :: STRING?, config :: MAP?) :: (file :: STRING?, source :: STRING?, format :: STRING?, nodes :: INTEGER?, relationships :: INTEGER?, properties :: INTEGER?, time :: INTEGER?, rows :: INTEGER?, batchSize :: INTEGER?, batches :: INTEGER?, done :: BOOLEAN?, data :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.export/apoc.export.graphml.data/"
      },
      "csv": {
        "name": "apoc.export.csv.query(query,file,{config,...,params:\\{params}}) - exports results from the cypher statement as csv to the provided file\n",
        "description": "apoc.export.csv.query(query :: STRING?, file :: STRING?, config :: MAP?) :: (file :: STRING?, source :: STRING?, format :: STRING?, nodes :: INTEGER?, relationships :: INTEGER?, properties :: INTEGER?, time :: INTEGER?, rows :: INTEGER?, batchSize :: INTEGER?, batches :: INTEGER?, done :: BOOLEAN?, data :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.export/apoc.export.csv.query/"
      },
      "cypherData": {
        "name": "apoc.export.cypherData(nodes,rels,file,config) - exports given nodes and relationships incl. indexes as cypher statements to the provided file\n",
        "description": "apoc.export.cypherData(nodes :: LIST? OF NODE?, rels :: LIST? OF RELATIONSHIP?, file :: STRING?, config :: MAP?) :: (file :: STRING?, batches :: INTEGER?, source :: STRING?, format :: STRING?, nodes :: INTEGER?, relationships :: INTEGER?, properties :: INTEGER?, time :: INTEGER?, rows :: INTEGER?, batchSize :: INTEGER?, cypherStatements :: STRING?, nodeStatements :: STRING?, relationshipStatements :: STRING?, schemaStatements :: STRING?, cleanupStatements :: STRING?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.export/apoc.export.cypherData/"
      },
      "cypherQuery": {
        "name": "apoc.export.cypherQuery(query,file,config) - exports nodes and relationships from the cypher kernelTransaction incl. indexes as cypher statements to the provided file\n",
        "description": "apoc.export.cypherQuery(query :: STRING?, file :: STRING?, config :: MAP?) :: (file :: STRING?, batches :: INTEGER?, source :: STRING?, format :: STRING?, nodes :: INTEGER?, relationships :: INTEGER?, properties :: INTEGER?, time :: INTEGER?, rows :: INTEGER?, batchSize :: INTEGER?, cypherStatements :: STRING?, nodeStatements :: STRING?, relationshipStatements :: STRING?, schemaStatements :: STRING?, cleanupStatements :: STRING?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.export/apoc.export.cypherQuery/"
      },
      "cypherAll": {
        "name": "apoc.export.cypherAll(file,config) - exports whole database incl. indexes as cypher statements to the provided file\n",
        "description": "apoc.export.cypherAll(file :: STRING?, config :: MAP?) :: (file :: STRING?, batches :: INTEGER?, source :: STRING?, format :: STRING?, nodes :: INTEGER?, relationships :: INTEGER?, properties :: INTEGER?, time :: INTEGER?, rows :: INTEGER?, batchSize :: INTEGER?, cypherStatements :: STRING?, nodeStatements :: STRING?, relationshipStatements :: STRING?, schemaStatements :: STRING?, cleanupStatements :: STRING?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.export/apoc.export.cypherAll/"
      }
    },
    "rel": {
      "id": {
        "name": "returns id for (virtual) relationships\n",
        "description": "apoc.rel.id(rel :: RELATIONSHIP?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.rel/apoc.rel.id/"
      },
      "startNode": {
        "name": "returns startNode for (virtual) relationships\n",
        "description": "apoc.rel.startNode(rel :: RELATIONSHIP?) :: (NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.rel/apoc.rel.startNode/"
      },
      "type": {
        "name": "returns type for (virtual) relationships\n",
        "description": "apoc.rel.type(rel :: RELATIONSHIP?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.rel/apoc.rel.type/"
      },
      "endNode": {
        "name": "returns endNode for (virtual) relationships\n",
        "description": "apoc.rel.endNode(rel :: RELATIONSHIP?) :: (NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.rel/apoc.rel.endNode/"
      }
    },
    "path": {
      "create": {
        "name": "apoc.path.create(startNode,[rels]) - creates a path instance of the given elements\n",
        "description": "apoc.path.create(startNode :: NODE?, rels = [] :: LIST? OF RELATIONSHIP?) :: (PATH?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.path/apoc.path.create/"
      },
      "expand": {
        "name": "apoc.path.expand(startNode <id>|Node|list, 'TYPE|TYPE_OUT>|<TYPE_IN', '+YesLabel|-NoLabel', minLevel, maxLevel ) yield path - expand from start node following the given relationships from min to max-level adhering to the label filters\n",
        "description": "apoc.path.expand(start :: ANY?, relationshipFilter :: STRING?, labelFilter :: STRING?, minLevel :: INTEGER?, maxLevel :: INTEGER?) :: (path :: PATH?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.path/apoc.path.expand/"
      },
      "subgraphAll": {
        "name": "apoc.path.subgraphAll(startNode <id>|Node|list, {maxLevel,relationshipFilter,labelFilter,bfs:true, filterStartNode:false, limit:-1, endNodes:[], terminatorNodes:[], sequence, beginSequenceAtStart:true}) yield nodes, relationships - expand the subgraph reachable from start node following relationships to max-level adhering to the label filters, and also return all relationships within the subgraph\n",
        "description": "apoc.path.subgraphAll(start :: ANY?, config :: MAP?) :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.path/apoc.path.subgraphAll/"
      },
      "spanningTree": {
        "name": "apoc.path.spanningTree(startNode <id>|Node|list, {maxLevel,relationshipFilter,labelFilter,bfs:true, filterStartNode:false, limit:-1, optional:false, endNodes:[], terminatorNodes:[], sequence, beginSequenceAtStart:true}) yield path - expand a spanning tree reachable from start node following relationships to max-level adhering to the label filters\n",
        "description": "apoc.path.spanningTree(start :: ANY?, config :: MAP?) :: (path :: PATH?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.path/apoc.path.spanningTree/"
      },
      "slice": {
        "name": "apoc.path.slice(path, [offset], [length]) - creates a sub-path with the given offset and length\n",
        "description": "apoc.path.slice(path :: PATH?, offset = 0 :: INTEGER?, length = -1 :: INTEGER?) :: (PATH?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.path/apoc.path.slice/"
      },
      "expandConfig": {
        "name": "apoc.path.expandConfig(startNode <id>|Node|list, {minLevel,maxLevel,uniqueness,relationshipFilter,labelFilter,uniqueness:'RELATIONSHIP_PATH',bfs:true, filterStartNode:false, limit:-1, optional:false, endNodes:[], terminatorNodes:[], sequence, beginSequenceAtStart:true}) yield path - expand from start node following the given relationships from min to max-level adhering to the label filters.\n",
        "description": "apoc.path.expandConfig(start :: ANY?, config :: MAP?) :: (path :: PATH?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.path/apoc.path.expandConfig/"
      },
      "combine": {
        "name": "apoc.path.combine(path1, path2) - combines the paths into one if the connecting node matches\n",
        "description": "apoc.path.combine(first :: PATH?, second :: PATH?) :: (PATH?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.path/apoc.path.combine/"
      },
      "elements": {
        "name": "apoc.path.elements(path) - returns a list of node-relationship-node-...\n",
        "description": "apoc.path.elements(path :: PATH?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.path/apoc.path.elements/"
      },
      "subgraphNodes": {
        "name": "apoc.path.subgraphNodes(startNode <id>|Node|list, {maxLevel,relationshipFilter,labelFilter,bfs:true, filterStartNode:false, limit:-1, optional:false, endNodes:[], terminatorNodes:[], sequence, beginSequenceAtStart:true}) yield node - expand the subgraph nodes reachable from start node following relationships to max-level adhering to the label filters\n",
        "description": "apoc.path.subgraphNodes(start :: ANY?, config :: MAP?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.path/apoc.path.subgraphNodes/"
      }
    },
    "temporal": {
      "toZonedTemporal": {
        "name": "apoc.temporal.toZonedTemporal('2012-12-23 23:59:59','yyyy-MM-dd HH:mm:ss', 'UTC-hour-offset') parse date string using the specified format to specified timezone\n",
        "description": "apoc.temporal.toZonedTemporal(time :: STRING?, format = yyyy-MM-dd HH:mm:ss :: STRING?, timezone = UTC :: STRING?) :: (DATETIME?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.temporal/apoc.temporal.toZonedTemporal/"
      },
      "format": {
        "name": "apoc.temporal.format(input, format) | Format a temporal value\n",
        "description": "apoc.temporal.format(temporal :: ANY?, format = yyyy-MM-dd :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.temporal/apoc.temporal.format/"
      },
      "formatDuration": {
        "name": "apoc.temporal.formatDuration(input, format) | Format a Duration\n",
        "description": "apoc.temporal.formatDuration(input :: ANY?, format :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.temporal/apoc.temporal.formatDuration/"
      }
    },
    "gephi": {
      "add": {
        "name": "apoc.gephi.add(url-or-key, workspace, data, weightproperty, ['exportproperty']) | streams passed in data to Gephi\n",
        "description": "apoc.gephi.add(urlOrKey :: STRING?, workspace :: STRING?, data :: ANY?, weightproperty = null :: STRING?, exportproperties = [] :: LIST? OF STRING?) :: (file :: STRING?, source :: STRING?, format :: STRING?, nodes :: INTEGER?, relationships :: INTEGER?, properties :: INTEGER?, time :: INTEGER?, rows :: INTEGER?, batchSize :: INTEGER?, batches :: INTEGER?, done :: BOOLEAN?, data :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.gephi/apoc.gephi.add/"
      }
    },
    "date": {
      "toYears": {
        "name": "toYears(timestamp) or toYears(date[,format]) - converts timestamp into floating point years\n",
        "description": "apoc.date.toYears(value :: ANY?, format = yyyy-MM-dd HH:mm:ss :: STRING?) :: (FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.toYears/"
      },
      "add": {
        "name": "apoc.date.add(12345, 'ms', -365, 'd') - given a timestamp in one time unit, adds a value of the specified time unit\n",
        "description": "apoc.date.add(time :: INTEGER?, unit :: STRING?, addValue :: INTEGER?, addUnit :: STRING?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.add/"
      },
      "format": {
        "name": "apoc.date.format(12345,('ms|s|m|h|d'),('yyyy-MM-dd HH:mm:ss zzz'),('TZ')) - get string representation of time value optionally using the specified unit (default ms) using specified format (default ISO) and specified time zone (default current TZ)\n",
        "description": "apoc.date.format(time :: INTEGER?, unit = ms :: STRING?, format = yyyy-MM-dd HH:mm:ss :: STRING?, timezone =  :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.format/"
      },
      "convert": {
        "name": "apoc.date.convert(12345, 'ms', 'd') - convert a timestamp in one time unit into one of a different time unit\n",
        "description": "apoc.date.convert(time :: INTEGER?, unit :: STRING?, toUnit :: STRING?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.convert/"
      },
      "parseAsZonedDateTime": {
        "name": "apoc.date.parseAsZonedDateTime('2012-12-23 23:59:59','yyyy-MM-dd HH:mm:ss', 'UTC-hour-offset') - parse date string using the specified format to specified timezone\n",
        "description": "apoc.date.parseAsZonedDateTime(time :: STRING?, format = yyyy-MM-dd HH:mm:ss :: STRING?, timezone = UTC :: STRING?) :: (DATETIME?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.parseAsZonedDateTime/"
      },
      "fromISO8601": {
        "name": "apoc.date.fromISO8601('yyyy-MM-ddTHH:mm:ss.SSSZ') - return number representation of time in EPOCH format\n",
        "description": "apoc.date.fromISO8601(time :: STRING?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.fromISO8601/"
      },
      "expireIn": {
        "name": "CALL apoc.date.expireIn(node,time,'time-unit') - expire node after specified length of time time by setting :TTL label and `ttl` property\n",
        "description": "apoc.date.expireIn(node :: NODE?, timeDelta :: INTEGER?, timeUnit :: STRING?) :: VOID\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.expireIn/"
      },
      "toISO8601": {
        "name": "apoc.date.toISO8601(12345,('ms|s|m|h|d') - return string representation of time in ISO8601 format\n",
        "description": "apoc.date.toISO8601(time :: INTEGER?, unit = ms :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.toISO8601/"
      },
      "parse": {
        "name": "apoc.date.parse('2012-12-23','ms|s|m|h|d','yyyy-MM-dd') - parse date string using the specified format into the specified time unit\n",
        "description": "apoc.date.parse(time :: STRING?, unit = ms :: STRING?, format = yyyy-MM-dd HH:mm:ss :: STRING?, timezone =  :: STRING?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.parse/"
      },
      "convertFormat": {
        "name": "apoc.date.convertFormat('Tue, 14 May 2019 14:52:06 -0400', 'rfc_1123_date_time', 'iso_date_time') - convert a String of one date format into a String of another date format.\n",
        "description": "apoc.date.convertFormat(temporal :: STRING?, currentFormat :: STRING?, convertTo = yyyy-MM-dd :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.convertFormat/"
      },
      "systemTimezone": {
        "name": "apoc.date.systemTimezone() - returns the system timezone display name\n",
        "description": "apoc.date.systemTimezone() :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.systemTimezone/"
      },
      "fields": {
        "name": "apoc.date.fields('2012-12-23',('yyyy-MM-dd')) - return columns and a map representation of date parsed with the given format with entries for years,months,weekdays,days,hours,minutes,seconds,zoneid\n",
        "description": "apoc.date.fields(date :: STRING?, pattern = yyyy-MM-dd HH:mm:ss :: STRING?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.fields/"
      },
      "expire": {
        "name": "CALL apoc.date.expire(node,time,'time-unit') - expire node at specified time by setting :TTL label and `ttl` property\n",
        "description": "apoc.date.expire(node :: NODE?, time :: INTEGER?, timeUnit :: STRING?) :: VOID\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.expire/"
      },
      "currentTimestamp": {
        "name": "apoc.date.currentTimestamp() - returns System.currentTimeMillis() at the time it was called. The value is current throughout transaction execution, and is different from Cypher’s timestamp() function, which does not update within a transaction.\n",
        "description": "apoc.date.currentTimestamp() :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.currentTimestamp/"
      },
      "field": {
        "name": "apoc.date.field(12345,('ms|s|m|h|d|month|year'),('TZ')\n",
        "description": "apoc.date.field(time :: INTEGER?, unit = d :: STRING?, timezone = UTC :: STRING?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.date/apoc.date.field/"
      }
    },
    "meta": {
      "graph": {
        "name": "apoc.meta.graph.of(\\{graph}, \\{config})  - examines a subset of the graph to provide a graph meta information\n",
        "description": "apoc.meta.graph.of(graph = {} :: ANY?, config = {} :: MAP?) :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.meta/apoc.meta.graph.of/"
      },
      "cypher": {
        "name": "apoc.meta.cypher.types(node-relationship-map)  - returns a map of keys to types\n",
        "description": "apoc.meta.cypher.types(properties :: ANY?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.meta/apoc.meta.cypher.types/"
      },
      "nodeTypeProperties": {
        "name": "apoc.meta.nodeTypeProperties()\n",
        "description": "apoc.meta.nodeTypeProperties(config = {} :: MAP?) :: (nodeType :: STRING?, nodeLabels :: LIST? OF STRING?, propertyName :: STRING?, propertyTypes :: LIST? OF STRING?, mandatory :: BOOLEAN?, propertyObservations :: INTEGER?, totalObservations :: INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.meta/apoc.meta.nodeTypeProperties/"
      },
      "typeName": {
        "name": "apoc.meta.typeName(value) - type name of a value (INTEGER,FLOAT,STRING,BOOLEAN,RELATIONSHIP,NODE,PATH,NULL,UNKNOWN,MAP,LIST)\n",
        "description": "apoc.meta.typeName(value :: ANY?) :: (STRING?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.meta/apoc.meta.typeName/"
      },
      "schema": {
        "name": "apoc.meta.schema(\\{config})  - examines a subset of the graph to provide a map-like meta information\n",
        "description": "apoc.meta.schema(config = {} :: MAP?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.meta/apoc.meta.schema/"
      },
      "relTypeProperties": {
        "name": "apoc.meta.relTypeProperties()\n",
        "description": "apoc.meta.relTypeProperties(config = {} :: MAP?) :: (relType :: STRING?, sourceNodeLabels :: LIST? OF STRING?, targetNodeLabels :: LIST? OF STRING?, propertyName :: STRING?, propertyTypes :: LIST? OF STRING?, mandatory :: BOOLEAN?, propertyObservations :: INTEGER?, totalObservations :: INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.meta/apoc.meta.relTypeProperties/"
      },
      "data": {
        "name": "apoc.meta.data.of(\\{graph}, \\{config})  - examines a subset of the graph to provide a tabular meta information\n",
        "description": "apoc.meta.data.of(graph :: ANY?, config = {} :: MAP?) :: (label :: STRING?, property :: STRING?, count :: INTEGER?, unique :: BOOLEAN?, index :: BOOLEAN?, existence :: BOOLEAN?, type :: STRING?, array :: BOOLEAN?, sample :: LIST? OF ANY?, leftCount :: INTEGER?, rightCount :: INTEGER?, left :: INTEGER?, right :: INTEGER?, other :: LIST? OF STRING?, otherLabels :: LIST? OF STRING?, elementType :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.meta/apoc.meta.data.of/"
      },
      "subGraph": {
        "name": "apoc.meta.subGraph({labels:[labels],rels:[rel-types], excludes:[labels,rel-types]}) - examines a sample sub graph to create the meta-graph\n",
        "description": "apoc.meta.subGraph(config :: MAP?) :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.meta/apoc.meta.subGraph/"
      },
      "type": {
        "name": "apoc.meta.type(value) - type name of a value (INTEGER,FLOAT,STRING,BOOLEAN,RELATIONSHIP,NODE,PATH,NULL,UNKNOWN,MAP,LIST)\n",
        "description": "apoc.meta.type(value :: ANY?) :: (STRING?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.meta/apoc.meta.type/"
      },
      "stats": {
        "name": "apoc.meta.stats yield labelCount, relTypeCount, propertyKeyCount, nodeCount, relCount, labels, relTypes, stats | returns the information stored in the transactional database statistics\n",
        "description": "apoc.meta.stats() :: (labelCount :: INTEGER?, relTypeCount :: INTEGER?, propertyKeyCount :: INTEGER?, nodeCount :: INTEGER?, relCount :: INTEGER?, labels :: MAP?, relTypes :: MAP?, relTypesCount :: MAP?, stats :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.meta/apoc.meta.stats/"
      },
      "types": {
        "name": "apoc.meta.types(node-relationship-map)  - returns a map of keys to types\n",
        "description": "apoc.meta.types(properties :: ANY?) :: (MAP?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.meta/apoc.meta.types/"
      },
      "graphSample": {
        "name": "apoc.meta.graphSample() - examines the database statistics to build the meta graph, very fast, might report extra relationships\n",
        "description": "apoc.meta.graphSample(config = {} :: MAP?) :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.meta/apoc.meta.graphSample/"
      },
      "isType": {
        "name": "apoc.meta.isType(value,type) - returns a row if type name matches none if not (INTEGER,FLOAT,STRING,BOOLEAN,RELATIONSHIP,NODE,PATH,NULL,UNKNOWN,MAP,LIST)\n",
        "description": "apoc.meta.isType(value :: ANY?, type :: STRING?) :: (BOOLEAN?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.meta/apoc.meta.isType/"
      }
    },
    "generate": {
      "ws": {
        "name": "apoc.generate.ws(noNodes, degree, beta, label, type) - generates a random graph according to the Watts-Strogatz model\n",
        "description": "apoc.generate.ws(noNodes :: INTEGER?, degree :: INTEGER?, beta :: FLOAT?, label :: STRING?, type :: STRING?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.generate/apoc.generate.ws/"
      },
      "simple": {
        "name": "apoc.generate.simple(degrees, label, type) - generates a simple random graph according to the given degree distribution\n",
        "description": "apoc.generate.simple(degrees :: LIST? OF INTEGER?, label :: STRING?, type :: STRING?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.generate/apoc.generate.simple/"
      },
      "er": {
        "name": "apoc.generate.er(noNodes, noEdges, label, type) - generates a random graph according to the Erdos-Renyi model\n",
        "description": "apoc.generate.er(noNodes :: INTEGER?, noEdges :: INTEGER?, label :: STRING?, type :: STRING?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.generate/apoc.generate.er/"
      },
      "ba": {
        "name": "apoc.generate.ba(noNodes, edgesPerNode, label, type) - generates a random graph according to the Barabasi-Albert model\n",
        "description": "apoc.generate.ba(noNodes :: INTEGER?, edgesPerNode :: INTEGER?, label :: STRING?, type :: STRING?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.generate/apoc.generate.ba/"
      },
      "complete": {
        "name": "apoc.generate.complete(noNodes, label, type) - generates a random complete graph\n",
        "description": "apoc.generate.complete(noNodes :: INTEGER?, label :: STRING?, type :: STRING?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.generate/apoc.generate.complete/"
      }
    },
    "math": {
      "minInt": {
        "name": "apoc.math.minInt() | return the minimum value an int can have\n",
        "description": "apoc.math.minInt() :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.math/apoc.math.minInt/"
      },
      "maxDouble": {
        "name": "apoc.math.maxDouble() | return the largest positive finite value of type double\n",
        "description": "apoc.math.maxDouble() :: (FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.math/apoc.math.maxDouble/"
      },
      "regr": {
        "name": "apoc.math.regr(label, propertyY, propertyX) - It calculates the coefficient of determination (R-squared) for the values of propertyY and propertyX in the provided label\n",
        "description": "apoc.math.regr(label :: STRING?, propertyY :: STRING?, propertyX :: STRING?) :: (r2 :: FLOAT?, avgX :: FLOAT?, avgY :: FLOAT?, slope :: FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.math/apoc.math.regr/"
      },
      "minByte": {
        "name": "apoc.math.minByte() | return the minimum value an byte can have\n",
        "description": "apoc.math.minByte() :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.math/apoc.math.minByte/"
      },
      "maxByte": {
        "name": "apoc.math.maxByte() | return the maximum value an byte can have\n",
        "description": "apoc.math.maxByte() :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.math/apoc.math.maxByte/"
      },
      "maxLong": {
        "name": "apoc.math.maxLong() | return the maximum value a long can have\n",
        "description": "apoc.math.maxLong() :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.math/apoc.math.maxLong/"
      },
      "minLong": {
        "name": "apoc.math.minLong() | return the minimum value a long can have\n",
        "description": "apoc.math.minLong() :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.math/apoc.math.minLong/"
      },
      "maxInt": {
        "name": "apoc.math.maxInt() | return the maximum value an int can have\n",
        "description": "apoc.math.maxInt() :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.math/apoc.math.maxInt/"
      },
      "minDouble": {
        "name": "apoc.math.minDouble() | return the smallest positive nonzero value of type double\n",
        "description": "apoc.math.minDouble() :: (FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.math/apoc.math.minDouble/"
      },
      "round": {
        "name": "apoc.math.round(value,[precision],mode=['CEILING','FLOOR','UP','DOWN','HALF_EVEN','HALF_DOWN','HALF_UP','DOWN','UNNECESSARY'])\n",
        "description": "apoc.math.round(value :: FLOAT?, precision = 0 :: INTEGER?, mode = HALF_UP :: STRING?) :: (FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.math/apoc.math.round/"
      }
    },
    "example": {
      "movies": {
        "name": "apoc.example.movies() | Creates the sample movies graph\n",
        "description": "apoc.example.movies() :: (file :: STRING?, source :: STRING?, format :: STRING?, nodes :: INTEGER?, relationships :: INTEGER?, properties :: INTEGER?, time :: INTEGER?, rows :: INTEGER?, batchSize :: INTEGER?, batches :: INTEGER?, done :: BOOLEAN?, data :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.example/apoc.example.movies/"
      }
    },
    "cypher": {
      "doIt": {
        "name": "apoc.cypher.doIt(fragment, params) yield value - executes writing fragment with the given parameters\n",
        "description": "apoc.cypher.doIt(cypher :: STRING?, params :: MAP?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.doIt/"
      },
      "runFirstColumnSingle": {
        "name": "apoc.cypher.runFirstColumnSingle(statement, params) - executes statement with given parameters, returns first element of the first column only, params are available as identifiers\n",
        "description": "apoc.cypher.runFirstColumnSingle(cypher :: STRING?, params :: MAP?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.runFirstColumnSingle/"
      },
      "runFile": {
        "name": "apoc.cypher.runFile(file or url,[{statistics:true,timeout:10,parameters:{}}]) - runs each statement in the file, all semicolon separated - currently no schema operations\n",
        "description": "apoc.cypher.runFile(file :: STRING?, config = {} :: MAP?) :: (row :: INTEGER?, result :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.runFile/"
      },
      "runFirstColumn": {
        "name": "use either apoc.cypher.runFirstColumnMany for a list return or apoc.cypher.runFirstColumnSingle for returning the first row of the first column\n",
        "description": "apoc.cypher.runFirstColumn(cypher :: STRING?, params :: MAP?, expectMultipleValues = true :: BOOLEAN?) :: (ANY?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.runFirstColumn/"
      },
      "runMany": {
        "name": "apoc.cypher.runMany('cypher;\\nstatements;',\\{params},[{statistics:true,timeout:10}]) - runs each semicolon separated statement and returns summary - currently no schema operations\n",
        "description": "apoc.cypher.runMany(cypher :: STRING?, params :: MAP?, config = {} :: MAP?) :: (row :: INTEGER?, result :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.runMany/"
      },
      "parallel": {
        "name": "apoc.cypher.parallel(fragment :: STRING?, params :: MAP?, parallelizeOn :: STRING?) :: (value :: MAP?)\n----",
        "description": "",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.parallel/"
      },
      "runFiles": {
        "name": "apoc.cypher.runFiles([files or urls],[{statistics:true,timeout:10,parameters:{}}])) - runs each statement in the files, all semicolon separated\n",
        "description": "apoc.cypher.runFiles(file :: LIST? OF STRING?, config = {} :: MAP?) :: (row :: INTEGER?, result :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.runFiles/"
      },
      "runSchemaFile": {
        "name": "apoc.cypher.runSchemaFile(file or url,[{statistics:true,timeout:10}]) - allows only schema operations, runs each schema statement in the file, all semicolon separated\n",
        "description": "apoc.cypher.runSchemaFile(file :: STRING?, config = {} :: MAP?) :: (row :: INTEGER?, result :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.runSchemaFile/"
      },
      "runFirstColumnMany": {
        "name": "apoc.cypher.runFirstColumnMany(statement, params) - executes statement with given parameters, returns first column only collected into a list, params are available as identifiers\n",
        "description": "apoc.cypher.runFirstColumnMany(cypher :: STRING?, params :: MAP?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.runFirstColumnMany/"
      },
      "run": {
        "name": "apoc.cypher.run(fragment, params) yield value - executes reading fragment with the given parameters - currently no schema operations\n",
        "description": "apoc.cypher.run(cypher :: STRING?, params :: MAP?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.run/"
      },
      "runSchemaFiles": {
        "name": "apoc.cypher.runSchemaFiles([files or urls],{statistics:true,timeout:10}) - allows only schema operations, runs each schema statement in the files, all semicolon separated\n",
        "description": "apoc.cypher.runSchemaFiles(file :: LIST? OF STRING?, config = {} :: MAP?) :: (row :: INTEGER?, result :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.runSchemaFiles/"
      },
      "mapParallel": {
        "name": "apoc.cypher.mapParallel(fragment, params, list-to-parallelize) yield value - executes fragment in parallel batches with the list segments being assigned to _\n",
        "description": "apoc.cypher.mapParallel(fragment :: STRING?, params :: MAP?, list :: LIST? OF ANY?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.mapParallel/"
      },
      "parallel2": {
        "name": "apoc.cypher.parallel2(fragment :: STRING?, params :: MAP?, parallelizeOn :: STRING?) :: (value :: MAP?)\n----",
        "description": "",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.parallel2/"
      },
      "mapParallel2": {
        "name": "apoc.cypher.mapParallel2(fragment, params, list-to-parallelize) yield value - executes fragment in parallel batches with the list segments being assigned to _\n",
        "description": "apoc.cypher.mapParallel2(fragment :: STRING?, params :: MAP?, list :: LIST? OF ANY?, partitions :: INTEGER?, timeout = 10 :: INTEGER?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.mapParallel2/"
      },
      "runTimeboxed": {
        "name": "apoc.cypher.runTimeboxed('cypherStatement',\\{params}, timeout) - abort kernelTransaction after timeout ms if not finished\n",
        "description": "apoc.cypher.runTimeboxed(cypher :: STRING?, params :: MAP?, timeout :: INTEGER?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cypher/apoc.cypher.runTimeboxed/"
      }
    },
    "do": {
      "when": {
        "name": "apoc.do.when(condition, ifQuery, elseQuery:'', params:{}) yield value - based on the conditional, executes writing ifQuery or elseQuery with the given parameters\n",
        "description": "apoc.do.when(condition :: BOOLEAN?, ifQuery :: STRING?, elseQuery =  :: STRING?, params = {} :: MAP?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.do/apoc.do.when/"
      },
      "case": {
        "name": "apoc.do.case([condition, query, condition, query, ...], elseQuery:'', params:{}) yield value - given a list of conditional / writing query pairs, executes the query associated with the first conditional evaluating to true (or the else query if none are true) with the given parameters\n",
        "description": "apoc.do.case(conditionals :: LIST? OF ANY?, elseQuery =  :: STRING?, params = {} :: MAP?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.do/apoc.do.case/"
      }
    },
    "xml": {
      "import": {
        "name": "Deprecated by apoc.import.xml\n",
        "description": "apoc.xml.import(url :: STRING?, config = {} :: MAP?) :: (node :: NODE?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.xml/apoc.xml.import/"
      },
      "parse": {
        "name": "RETURN apoc.xml.parse(<xml string>, <xPath string>, config, false) AS value\n",
        "description": "apoc.xml.parse(data :: STRING?, path = / :: STRING?, config = {} :: MAP?, simple = false :: BOOLEAN?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.xml/apoc.xml.parse/"
      }
    },
    "stats": {
      "degrees": {
        "name": "apoc.stats.degrees(types =  :: STRING?) :: (type :: STRING?, direction :: STRING?, total :: INTEGER?, p50 :: INTEGER?, p75 :: INTEGER?, p90 :: INTEGER?, p95 :: INTEGER?, p99 :: INTEGER?, p999 :: INTEGER?, max :: INTEGER?, min :: INTEGER?, mean :: FLOAT?)\n----",
        "description": "",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.stats/apoc.stats.degrees/"
      }
    },
    "monitor": {
      "ids": {
        "name": "apoc.monitor.ids() returns the object ids in use for this neo4j instance\n",
        "description": "apoc.monitor.ids() :: (nodeIds :: INTEGER?, relIds :: INTEGER?, propIds :: INTEGER?, relTypeIds :: INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.monitor/apoc.monitor.ids/"
      },
      "kernel": {
        "name": "apoc.monitor.kernel() returns informations about the neo4j kernel\n",
        "description": "apoc.monitor.kernel() :: (readOnly :: BOOLEAN?, kernelVersion :: STRING?, storeId :: STRING?, kernelStartTime :: STRING?, databaseName :: STRING?, storeLogVersion :: INTEGER?, storeCreationDate :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.monitor/apoc.monitor.kernel/"
      },
      "store": {
        "name": "apoc.monitor.store() returns informations about the sizes of the different parts of the neo4j graph store\n",
        "description": "apoc.monitor.store() :: (logSize :: INTEGER?, stringStoreSize :: INTEGER?, arrayStoreSize :: INTEGER?, relStoreSize :: INTEGER?, propStoreSize :: INTEGER?, totalStoreSize :: INTEGER?, nodeStoreSize :: INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.monitor/apoc.monitor.store/"
      },
      "tx": {
        "name": "apoc.monitor.tx() returns informations about the neo4j transaction manager\n",
        "description": "apoc.monitor.tx() :: (rolledBackTx :: INTEGER?, peakTx :: INTEGER?, lastTxId :: INTEGER?, currentOpenedTx :: INTEGER?, totalOpenedTx :: INTEGER?, totalTx :: INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.monitor/apoc.monitor.tx/"
      }
    },
    "spatial": {
      "geocode": {
        "name": "apoc.spatial.geocode('address') YIELD location, latitude, longitude, description, osmData - look up geographic location of address from a geocoding service (the default one is OpenStreetMap)\n",
        "description": "apoc.spatial.geocode(location :: STRING?, maxResults = 100 :: INTEGER?, quotaException = false :: BOOLEAN?) :: (location :: MAP?, data :: MAP?, latitude :: FLOAT?, longitude :: FLOAT?, description :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.spatial/apoc.spatial.geocode/"
      },
      "sortByDistance": {
        "name": "apoc.spatial.sortByDistance(List<Path>) sort the given paths based on the geo informations (lat/long) in ascending order\n",
        "description": "apoc.spatial.sortByDistance(paths :: LIST? OF PATH?) :: (path :: PATH?, distance :: FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.spatial/apoc.spatial.sortByDistance/"
      },
      "geocodeOnce": {
        "name": "apoc.spatial.geocodeOnce('address') YIELD location, latitude, longitude, description, osmData - look up geographic location of address from a geocoding service (the default one is OpenStreetMap)\n",
        "description": "apoc.spatial.geocodeOnce(location :: STRING?) :: (location :: MAP?, data :: MAP?, latitude :: FLOAT?, longitude :: FLOAT?, description :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.spatial/apoc.spatial.geocodeOnce/"
      },
      "reverseGeocode": {
        "name": "apoc.spatial.reverseGeocode(latitude,longitude) YIELD location, latitude, longitude, description - look up address from latitude and longitude from a geocoding service (the default one is OpenStreetMap)\n",
        "description": "apoc.spatial.reverseGeocode(latitude :: FLOAT?, longitude :: FLOAT?, quotaException = false :: BOOLEAN?) :: (location :: MAP?, data :: MAP?, latitude :: FLOAT?, longitude :: FLOAT?, description :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.spatial/apoc.spatial.reverseGeocode/"
      }
    },
    "convert": {
      "toTree": {
        "name": "apoc.convert.toTree([paths],[lowerCaseRels=true], [config]) creates a stream of nested documents representing the at least one root of these paths\n",
        "description": "apoc.convert.toTree(paths :: LIST? OF PATH?, lowerCaseRels = true :: BOOLEAN?, config = {} :: MAP?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toTree/"
      },
      "toRelationship": {
        "name": "apoc.convert.toRelationship(value) | tries it's best to convert the value to a relationship\n",
        "description": "apoc.convert.toRelationship(relationship :: ANY?) :: (RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toRelationship/"
      },
      "toIntList": {
        "name": "apoc.convert.toIntList(value) | tries it's best to convert the value to a list of integers\n",
        "description": "apoc.convert.toIntList(list :: ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toIntList/"
      },
      "toStringList": {
        "name": "apoc.convert.toStringList(value) | tries it's best to convert the value to a list of strings\n",
        "description": "apoc.convert.toStringList(list :: ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toStringList/"
      },
      "toRelationshipList": {
        "name": "apoc.convert.toRelationshipList(value) | tries it's best to convert the value to a list of relationships\n",
        "description": "apoc.convert.toRelationshipList(list :: ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toRelationshipList/"
      },
      "toJson": {
        "name": "apoc.convert.toJson([1,2,3]) or toJson({a:42,b:\"foo\",c:[1,2,3]}) or toJson(NODE/REL/PATH)\n",
        "description": "apoc.convert.toJson(value :: ANY?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toJson/"
      },
      "toString": {
        "name": "apoc.convert.toString(value) | tries it's best to convert the value to a string\n",
        "description": "apoc.convert.toString(string :: ANY?) :: (STRING?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toString/"
      },
      "toList": {
        "name": "apoc.convert.toList(value) | tries it's best to convert the value to a list\n",
        "description": "apoc.convert.toList(list :: ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toList/"
      },
      "toMap": {
        "name": "apoc.convert.toMap(value) | tries it's best to convert the value to a map\n",
        "description": "apoc.convert.toMap(map :: ANY?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toMap/"
      },
      "getJsonPropertyMap": {
        "name": "apoc.convert.getJsonPropertyMap(node,key[,'json-path']) - converts serialized JSON in property back to map\n",
        "description": "apoc.convert.getJsonPropertyMap(node :: NODE?, key :: STRING?, path =  :: STRING?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.getJsonPropertyMap/"
      },
      "toInteger": {
        "name": "apoc.convert.toInteger(value) | tries it's best to convert the value to an integer\n",
        "description": "apoc.convert.toInteger(object :: ANY?) :: (INTEGER?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toInteger/"
      },
      "setJsonProperty": {
        "name": "apoc.convert.setJsonProperty(node,key,complexValue) - sets value serialized to JSON as property with the given name on the node\n",
        "description": "apoc.convert.setJsonProperty(node :: NODE?, key :: STRING?, value :: ANY?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.setJsonProperty/"
      },
      "toSortedJsonMap": {
        "name": "apoc.convert.toSortedJsonMap(node|map, ignoreCase:true) - returns a JSON map with keys sorted alphabetically, with optional case sensitivity\n",
        "description": "apoc.convert.toSortedJsonMap(value :: ANY?, ignoreCase = true :: BOOLEAN?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toSortedJsonMap/"
      },
      "fromJsonList": {
        "name": "apoc.convert.fromJsonList('[1,2,3]'[,'json-path'])\n",
        "description": "apoc.convert.fromJsonList(list :: STRING?, path =  :: STRING?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.fromJsonList/"
      },
      "toBooleanList": {
        "name": "apoc.convert.toBooleanList(value) | tries it's best to convert the value to a list of booleans\n",
        "description": "apoc.convert.toBooleanList(list :: ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toBooleanList/"
      },
      "toNodeList": {
        "name": "apoc.convert.toNodeList(value) | tries it's best to convert the value to a list of nodes\n",
        "description": "apoc.convert.toNodeList(list :: ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toNodeList/"
      },
      "toSet": {
        "name": "apoc.convert.toSet(value) | tries it's best to convert the value to a set\n",
        "description": "apoc.convert.toSet(list :: ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toSet/"
      },
      "getJsonProperty": {
        "name": "apoc.convert.getJsonProperty(node,key[,'json-path']) - converts serialized JSON in property back to original object\n",
        "description": "apoc.convert.getJsonProperty(node :: NODE?, key :: STRING?, path =  :: STRING?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.getJsonProperty/"
      },
      "toBoolean": {
        "name": "apoc.convert.toBoolean(value) | tries it's best to convert the value to a boolean\n",
        "description": "apoc.convert.toBoolean(bool :: ANY?) :: (BOOLEAN?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toBoolean/"
      },
      "toNode": {
        "name": "apoc.convert.toNode(value) | tries it's best to convert the value to a node\n",
        "description": "apoc.convert.toNode(node :: ANY?) :: (NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toNode/"
      },
      "fromJsonMap": {
        "name": "apoc.convert.fromJsonMap('{\"a\":42,\"b\":\"foo\",\"c\":[1,2,3]}'[,'json-path'])\n",
        "description": "apoc.convert.fromJsonMap(map :: STRING?, path =  :: STRING?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.fromJsonMap/"
      },
      "toFloat": {
        "name": "apoc.convert.toFloat(value) | tries it's best to convert the value to a float\n",
        "description": "apoc.convert.toFloat(object :: ANY?) :: (FLOAT?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/apoc.convert.toFloat/"
      }
    },
    "load": {
      "csvParams": {
        "name": "apoc.load.csvParams('url', {httpHeader: value}, payload, \\{config}) YIELD lineNo, list, map - load from CSV URL (e.g. web-api) while sending headers / payload to load CSV from URL as stream of values,\n config contains any of: {skip:1,limit:5,header:false,sep:'TAB',ignore:['tmp'],nullValues:['na'],arraySep:';',mapping:{years:{type:'int',arraySep:'-',array:false,name:'age',ignore:false}}",
        "description": "apoc.load.csvParams(url :: STRING?, httpHeaders :: MAP?, payload :: STRING?, config = {} :: MAP?) :: (lineNo :: INTEGER?, list :: LIST? OF ANY?, strings :: LIST? OF STRING?, map :: MAP?, stringMap :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.csvParams/"
      },
      "jsonParams": {
        "name": "apoc.load.jsonParams('url',{header:value},payload, config) YIELD value - load from JSON URL (e.g. web-api) while sending headers / payload to import JSON as stream of values if the JSON was an array or a single value if it was a map\n",
        "description": "apoc.load.jsonParams(urlOrKey :: STRING?, headers :: MAP?, payload :: STRING?, path =  :: STRING?, config = {} :: MAP?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.jsonParams/"
      },
      "xml": {
        "name": "apoc.load.xml('http://example.com/test.xml', 'xPath',config, false) YIELD value as doc CREATE (p:Person) SET p.name = doc.name - load from XML URL (e.g. web-api) to import XML as single nested map with attributes and _type, _text and _childrenx fields.\n",
        "description": "apoc.load.xml(url :: STRING?, path = / :: STRING?, config = {} :: MAP?, simple = false :: BOOLEAN?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.xml/"
      },
      "csv": {
        "name": "apoc.load.csv('url',\\{config}) YIELD lineNo, list, map - load CSV from URL as stream of values,\n config contains any of: {skip:1,limit:5,header:false,sep:'TAB',ignore:['tmp'],nullValues:['na'],arraySep:';',mapping:{years:{type:'int',arraySep:'-',array:false,name:'age',ignore:false}}",
        "description": "apoc.load.csv(url :: STRING?, config = {} :: MAP?) :: (lineNo :: INTEGER?, list :: LIST? OF ANY?, strings :: LIST? OF STRING?, map :: MAP?, stringMap :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.csv/"
      },
      "directory": {
        "name": "apoc.load.directory.async.add(name, cypher, pattern, urlDir, {}) YIELD name, status, pattern, cypher, urlDir, config, error - Add or replace a folder listener with a specific name, pattern and url directory that execute the specified cypher query when an event is triggered and return listener list\n",
        "description": "apoc.load.directory.async.add(name :: STRING?, cypher :: STRING?, pattern = * :: STRING?, urlDir =  :: STRING?, config = {} :: MAP?) :: (name :: STRING?, status :: STRING?, pattern :: STRING?, cypher :: STRING?, urlDir :: STRING?, config :: MAP?, error :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.directory.async.add/"
      },
      "json": {
        "name": "apoc.load.json('url',path, config) YIELD value -  import JSON as stream of values if the JSON was an array or a single value if it was a map\n",
        "description": "apoc.load.json(url :: STRING?, path =  :: STRING?, config = {} :: MAP?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.json/"
      },
      "jdbcUpdate": {
        "name": "apoc.load.jdbcUpdate('key or url','statement',[params],config) YIELD row - update relational database, from a SQL statement with optional parameters\n",
        "description": "apoc.load.jdbcUpdate(jdbc :: STRING?, query :: STRING?, params = [] :: LIST? OF ANY?, config = {} :: MAP?) :: (row :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.jdbcUpdate/"
      },
      "jdbc": {
        "name": "apoc.load.jdbc('key or url','table or statement', params, config) YIELD row - load from relational database, from a full table or a sql statement\n",
        "description": "apoc.load.jdbc(jdbc :: STRING?, tableOrSql :: STRING?, params = [] :: LIST? OF ANY?, config = {} :: MAP?) :: (row :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.jdbc/"
      },
      "html": {
        "name": "apoc.load.html('url',{name: jquery, name2: jquery}, config) YIELD value - Load Html page and return the result as a Map\n",
        "description": "apoc.load.html(url :: STRING?, query = {} :: MAP?, config = {} :: MAP?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.html/"
      },
      "jsonArray": {
        "name": "apoc.load.jsonArray('url') YIELD value - load array from JSON URL (e.g. web-api) to import JSON as stream of values\n",
        "description": "apoc.load.jsonArray(url :: STRING?, path =  :: STRING?) :: (value :: ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.jsonArray/"
      },
      "xmlSimple": {
        "name": "apoc.load.xmlSimple('http://example.com/test.xml') YIELD value as doc CREATE (p:Person) SET p.name = doc.name - load from XML URL (e.g. web-api) to import XML as single nested map with attributes and _type, _text and _children fields. This method does intentionally not work with XML mixed content.\n",
        "description": "apoc.load.xmlSimple(url :: STRING?) :: (value :: MAP?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.xmlSimple/"
      },
      "xls": {
        "name": "apoc.load.xls('url','selector',\\{config}) YIELD lineNo, list, map - load XLS fom URL as stream of row values,\n config contains any of: {skip:1,limit:5,header:false,ignore:['tmp'],arraySep:';',mapping:{years:{type:'int',arraySep:'-',array:false,name:'age',ignore:false, dateFormat:'iso_date', dateParse:['dd-MM-yyyy']}}",
        "description": "apoc.load.xls(url :: STRING?, selector :: STRING?, config = {} :: MAP?) :: (lineNo :: INTEGER?, list :: LIST? OF ANY?, map :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.xls/"
      },
      "jdbcParams": {
        "name": "deprecated - please use: apoc.load.jdbc('key or url','',[params]) YIELD row - load from relational database, from a sql statement with parameters\n",
        "description": "apoc.load.jdbcParams(jdbc :: STRING?, sql :: STRING?, params :: LIST? OF ANY?, config = {} :: MAP?) :: (row :: MAP?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.jdbcParams/"
      },
      "ldap": {
        "name": "apoc.load.ldap(\"key\" or \\{connectionMap},\\{searchMap}) Load entries from an ldap source (yield entry)\n",
        "description": "apoc.load.ldap(connection :: ANY?, search :: MAP?) :: (entry :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.ldap/"
      },
      "driver": {
        "name": "apoc.load.driver('org.apache.derby.jdbc.EmbeddedDriver') register JDBC driver of source database\n",
        "description": "apoc.load.driver(driverClass :: STRING?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.load/apoc.load.driver/"
      }
    },
    "node": {
      "labels": {
        "name": "returns labels for (virtual) nodes\n",
        "description": "apoc.node.labels(node :: NODE?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.node/apoc.node.labels/"
      },
      "degree": {
        "name": "apoc.node.degree(node, rel-direction-pattern) - returns total degrees of the given relationships in the pattern, can use '>' or '<' for all outgoing or incoming relationships\n",
        "description": "apoc.node.degree(node :: NODE?, types =  :: STRING?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.node/apoc.node.degree/"
      },
      "relationship": {
        "name": "apoc.node.relationship.types(node, rel-direction-pattern) - returns a list of distinct relationship types\n",
        "description": "apoc.node.relationship.types(node :: NODE?, types =  :: STRING?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.node/apoc.node.relationship.types/"
      },
      "id": {
        "name": "returns id for (virtual) nodes\n",
        "description": "apoc.node.id(node :: NODE?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.node/apoc.node.id/"
      },
      "relationships": {
        "name": "apoc.node.relationships.exist(node, rel-direction-pattern) - returns a map with rel-pattern, boolean for the given relationship patterns\n",
        "description": "apoc.node.relationships.exist(node :: NODE?, types =  :: STRING?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.node/apoc.node.relationships.exist/"
      }
    },
    "text": {
      "decapitalizeAll": {
        "name": "apoc.text.decapitalizeAll(text) YIELD value - decapitalize the first letter of all words\n",
        "description": "apoc.text.decapitalizeAll(text :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.decapitalizeAll/"
      },
      "snakeCase": {
        "name": "apoc.text.snakeCase(text) YIELD value - Convert a string to snake-case\n",
        "description": "apoc.text.snakeCase(text :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.snakeCase/"
      },
      "bytes": {
        "name": "apoc.text.bytes(text,[charset]) - return bytes of the text\n",
        "description": "apoc.text.bytes(text :: STRING?, charset = UTF-8 :: STRING?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.bytes/"
      },
      "base64Encode": {
        "name": "apoc.text.base64Encode(text) YIELD value - Encode a string with Base64\n",
        "description": "apoc.text.base64Encode(text :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.base64Encode/"
      },
      "urldecode": {
        "name": "apoc.text.urldecode(text) - return the urldecoded text\n",
        "description": "apoc.text.urldecode(text :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.urldecode/"
      },
      "urlencode": {
        "name": "apoc.text.urlencode(text) - return the urlencoded text\n",
        "description": "apoc.text.urlencode(text :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.urlencode/"
      },
      "sorensenDiceSimilarity": {
        "name": "apoc.text.sorensenDiceSimilarityWithLanguage(text1, text2, languageTag) - compare the given strings with the Sørensen–Dice coefficient formula, with the provided IETF language tag\n",
        "description": "apoc.text.sorensenDiceSimilarity(text1 :: STRING?, text2 :: STRING?, languageTag = en :: STRING?) :: (FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.sorensenDiceSimilarity/"
      },
      "levenshteinDistance": {
        "name": "apoc.text.levenshteinDistance(text1, text2) - compare the given strings with the Levenshtein distance algorithm.\n",
        "description": "apoc.text.levenshteinDistance(text1 :: STRING?, text2 :: STRING?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.levenshteinDistance/"
      },
      "join": {
        "name": "apoc.text.join(['text1','text2',...], delimiter) - join the given strings with the given delimiter.\n",
        "description": "apoc.text.join(texts :: LIST? OF STRING?, delimiter :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.join/"
      },
      "jaroWinklerDistance": {
        "name": "apoc.text.jaroWinklerDistance(text1, text2) - compare the given strings with the Jaro-Winkler distance algorithm.\n",
        "description": "apoc.text.jaroWinklerDistance(text1 :: STRING?, text2 :: STRING?) :: (FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.jaroWinklerDistance/"
      },
      "regexGroups": {
        "name": "apoc.text.regexGroups(text, regex) - return all matching groups of the regex on the given text.\n",
        "description": "apoc.text.regexGroups(text :: STRING?, regex :: STRING?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.regexGroups/"
      },
      "fuzzyMatch": {
        "name": "apoc.text.fuzzyMatch(text1, text2) - check if 2 words can be matched in a fuzzy way. Depending on the length of the String it will allow more characters that needs to be edited to match the second String.\n",
        "description": "apoc.text.fuzzyMatch(text1 :: STRING?, text2 :: STRING?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.fuzzyMatch/"
      },
      "repeat": {
        "name": "apoc.text.repeat(item, count) - string multiplication\n",
        "description": "apoc.text.repeat(item :: STRING?, count :: INTEGER?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.repeat/"
      },
      "capitalizeAll": {
        "name": "apoc.text.capitalizeAll(text) YIELD value - capitalise the first letter of every word in the text\n",
        "description": "apoc.text.capitalizeAll(text :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.capitalizeAll/"
      },
      "upperCamelCase": {
        "name": "apoc.text.upperCamelCase(text) YIELD value - Convert a string to camelCase\n",
        "description": "apoc.text.upperCamelCase(text :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.upperCamelCase/"
      },
      "swapCase": {
        "name": "apoc.text.swapCase(text) YIELD value - Swap the case of a string\n",
        "description": "apoc.text.swapCase(text :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.swapCase/"
      },
      "charAt": {
        "name": "apoc.text.charAt(text, index) - the decimal value of the character at the given index\n",
        "description": "apoc.text.charAt(text :: STRING?, index :: INTEGER?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.charAt/"
      },
      "doubleMetaphone": {
        "name": "apoc.text.doubleMetaphone(value) yield value - Compute the Double Metaphone phonetic encoding of all words of the text value\n",
        "description": "apoc.text.doubleMetaphone(value :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.doubleMetaphone/"
      },
      "hexValue": {
        "name": "apoc.text.hexValue(value) - the hex value string of the given number\n",
        "description": "apoc.text.hexValue(value :: INTEGER?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.hexValue/"
      },
      "phoneticDelta": {
        "name": "apoc.text.phoneticDelta(text1, text2) yield phonetic1, phonetic2, delta - Compute the US_ENGLISH soundex character difference between two given strings\n",
        "description": "apoc.text.phoneticDelta(text1 :: STRING?, text2 :: STRING?) :: (phonetic1 :: STRING?, phonetic2 :: STRING?, delta :: INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.phoneticDelta/"
      },
      "capitalize": {
        "name": "apoc.text.capitalize(text) YIELD value - capitalise the first letter of the word\n",
        "description": "apoc.text.capitalize(text :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.capitalize/"
      },
      "toUpperCase": {
        "name": "apoc.text.toUpperCase(text) YIELD value - Convert a string to UPPER_CASE\n",
        "description": "apoc.text.toUpperCase(text :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.toUpperCase/"
      },
      "decapitalize": {
        "name": "apoc.text.decapitalize(text) YIELD value - decapitalize the first letter of the word\n",
        "description": "apoc.text.decapitalize(text :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.decapitalize/"
      },
      "regreplace": {
        "name": "apoc.text.regreplace(text, regex, replacement) - replace each substring of the given string that matches the given regular expression with the given replacement.\n",
        "description": "apoc.text.regreplace(text :: STRING?, regex :: STRING?, replacement :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.regreplace/"
      },
      "indexOf": {
        "name": "apoc.text.indexOf(text, lookup, from=0, to=-1==len) - find the first occurence of the lookup string in the text, from inclusive, to exclusive, -1 if not found, null if text is null.\n",
        "description": "apoc.text.indexOf(text :: STRING?, lookup :: STRING?, from = 0 :: INTEGER?, to = -1 :: INTEGER?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.indexOf/"
      },
      "hammingDistance": {
        "name": "apoc.text.hammingDistance(text1, text2) - compare the given strings with the Hamming distance algorithm.\n",
        "description": "apoc.text.hammingDistance(text1 :: STRING?, text2 :: STRING?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.hammingDistance/"
      },
      "compareCleaned": {
        "name": "apoc.text.compareCleaned(text1, text2) - compare the given strings stripped of everything except alpha numeric characters converted to lower case.\n",
        "description": "apoc.text.compareCleaned(text1 :: STRING?, text2 :: STRING?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.compareCleaned/"
      },
      "lpad": {
        "name": "apoc.text.lpad(text,count,delim) YIELD value - left pad the string to the given width\n",
        "description": "apoc.text.lpad(text :: STRING?, count :: INTEGER?, delim =   :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.lpad/"
      },
      "clean": {
        "name": "apoc.text.clean(text) - strip the given string of everything except alpha numeric characters and convert it to lower case.\n",
        "description": "apoc.text.clean(text :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.clean/"
      },
      "byteCount": {
        "name": "apoc.text.byteCount(text,[charset]) - return size of text in bytes\n",
        "description": "apoc.text.byteCount(text :: STRING?, charset = UTF-8 :: STRING?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.byteCount/"
      },
      "levenshteinSimilarity": {
        "name": "apoc.text.levenshteinSimilarity(text1, text2) - calculate the similarity (a value within 0 and 1) between two texts.\n",
        "description": "apoc.text.levenshteinSimilarity(text1 :: STRING?, text2 :: STRING?) :: (FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.levenshteinSimilarity/"
      },
      "slug": {
        "name": "apoc.text.slug(text, delim) - slug the text with the given delimiter\n",
        "description": "apoc.text.slug(text :: STRING?, delim = - :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.slug/"
      },
      "phonetic": {
        "name": "apoc.text.phonetic(text) yield value - Compute the US_ENGLISH phonetic soundex encoding of all words of the text\n",
        "description": "apoc.text.phonetic(value :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.phonetic/"
      },
      "distance": {
        "name": "apoc.text.distance(text1, text2) - compare the given strings with the Levenshtein distance algorithm.\n",
        "description": "apoc.text.distance(text1 :: STRING?, text2 :: STRING?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.distance/"
      },
      "toCypher": {
        "name": "apoc.text.toCypher(value, {skipKeys,keepKeys,skipValues,keepValues,skipNull,node,relationship,start,end}) | tries it's best to convert the value to a cypher-property-string\n",
        "description": "apoc.text.toCypher(value :: ANY?, config = {} :: MAP?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.toCypher/"
      },
      "hexCharAt": {
        "name": "apoc.text.hexCharAt(text, index) - the hex value string of the character at the given index\n",
        "description": "apoc.text.hexCharAt(text :: STRING?, index :: INTEGER?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.hexCharAt/"
      },
      "base64UrlDecode": {
        "name": "apoc.text.base64UrlDecode(url) YIELD value - Decode Base64 encoded url\n",
        "description": "apoc.text.base64UrlDecode(url :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.base64UrlDecode/"
      },
      "code": {
        "name": "apoc.text.code(codepoint) - Returns the unicode character of the given codepoint\n",
        "description": "apoc.text.code(codepoint :: INTEGER?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.code/"
      },
      "split": {
        "name": "apoc.text.split(text, regex, limit) - splits the given text around matches of the given regex.\n",
        "description": "apoc.text.split(text :: STRING?, regex :: STRING?, limit = 0 :: INTEGER?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.split/"
      },
      "indexesOf": {
        "name": "apoc.text.indexesOf(text, lookup, from=0, to=-1==len) - finds all occurences of the lookup string in the text, return list, from inclusive, to exclusive, empty list if not found, null if text is null.\n",
        "description": "apoc.text.indexesOf(text :: STRING?, lookup :: STRING?, from = 0 :: INTEGER?, to = -1 :: INTEGER?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.indexesOf/"
      },
      "replace": {
        "name": "apoc.text.replace(text, regex, replacement) - replace each substring of the given string that matches the given regular expression with the given replacement.\n",
        "description": "apoc.text.replace(text :: STRING?, regex :: STRING?, replacement :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.replace/"
      },
      "format": {
        "name": "apoc.text.format(text,[params],language) - sprintf format the string with the params given\n",
        "description": "apoc.text.format(text :: STRING?, params :: LIST? OF ANY?, language = en :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.format/"
      },
      "base64UrlEncode": {
        "name": "apoc.text.base64UrlEncode(text) YIELD value - Encode a url with Base64\n",
        "description": "apoc.text.base64UrlEncode(url :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.base64UrlEncode/"
      },
      "random": {
        "name": "apoc.text.random(length, valid) YIELD value - generate a random string\n",
        "description": "apoc.text.random(length :: INTEGER?, valid = A-Za-z0-9 :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.random/"
      },
      "base64Decode": {
        "name": "apoc.text.base64Decode(text) YIELD value - Decode Base64 encoded string\n",
        "description": "apoc.text.base64Decode(text :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.base64Decode/"
      },
      "rpad": {
        "name": "apoc.text.rpad(text,count,delim) YIELD value - right pad the string to the given width\n",
        "description": "apoc.text.rpad(text :: STRING?, count :: INTEGER?, delim =   :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.rpad/"
      },
      "camelCase": {
        "name": "apoc.text.camelCase(text) YIELD value - Convert a string to camelCase\n",
        "description": "apoc.text.camelCase(text :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.text/apoc.text.camelCase/"
      }
    },
    "number": {
      "exact": {
        "name": "apoc.number.exact.mul(stringA,stringB,[prec],[roundingModel]) - return the multiplication's result of two large numbers\n",
        "description": "apoc.number.exact.mul(stringA :: STRING?, stringB :: STRING?, precision = 0 :: INTEGER?, roundingMode = HALF_UP :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.number/apoc.number.exact.mul/"
      },
      "parseInt": {
        "name": "apoc.number.parseInt(text)  | parse a text using the default system pattern and language to produce a long\n",
        "description": "apoc.number.parseInt(text :: STRING?, pattern =  :: STRING?, lang =  :: STRING?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.number/apoc.number.parseInt/"
      },
      "format": {
        "name": "apoc.number.format(number)  | format a long or double using the default system pattern and language to produce a string\n",
        "description": "apoc.number.format(number :: ANY?, pattern =  :: STRING?, lang =  :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.number/apoc.number.format/"
      },
      "parseFloat": {
        "name": "apoc.number.parseFloat(text)  | parse a text using the default system pattern and language to produce a double\n",
        "description": "apoc.number.parseFloat(text :: STRING?, pattern =  :: STRING?, lang =  :: STRING?) :: (FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.number/apoc.number.parseFloat/"
      },
      "romanToArabic": {
        "name": "apoc.number.romanToArabic(romanNumber)  | convert roman numbers to arabic\n",
        "description": "apoc.number.romanToArabic(romanNumber :: STRING?) :: (NUMBER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.number/apoc.number.romanToArabic/"
      },
      "arabicToRoman": {
        "name": "apoc.number.arabicToRoman(number)  | convert arabic numbers to roman\n",
        "description": "apoc.number.arabicToRoman(number :: ANY?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.number/apoc.number.arabicToRoman/"
      }
    },
    "map": {
      "flatten": {
        "name": "apoc.map.flatten(map, delimiter:'.') yield map - flattens nested items in map using dot notation\n",
        "description": "apoc.map.flatten(map :: MAP?, delimiter = . :: STRING?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.flatten/"
      },
      "removeKey": {
        "name": "apoc.map.removeKey(map,key,{recursive:true/false}) - remove the key from the map (recursively if recursive is true)\n",
        "description": "apoc.map.removeKey(map :: MAP?, key :: STRING?, config = {} :: MAP?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.removeKey/"
      },
      "setKey": {
        "name": "apoc.map.setKey(map,key,value)\n",
        "description": "apoc.map.setKey(map :: MAP?, key :: STRING?, value :: ANY?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.setKey/"
      },
      "values": {
        "name": "apoc.map.values(map, [key1,key2,key3,...],[addNullsForMissing]) returns list of values indicated by the keys\n",
        "description": "apoc.map.values(map :: MAP?, keys = [] :: LIST? OF STRING?, addNullsForMissing = false :: BOOLEAN?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.values/"
      },
      "removeKeys": {
        "name": "apoc.map.removeKeys(map,[keys],{recursive:true/false}) - remove the keys from the map (recursively if recursive is true)\n",
        "description": "apoc.map.removeKeys(map :: MAP?, keys :: LIST? OF STRING?, config = {} :: MAP?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.removeKeys/"
      },
      "setEntry": {
        "name": "apoc.map.setEntry(map,key,value)\n",
        "description": "apoc.map.setEntry(map :: MAP?, key :: STRING?, value :: ANY?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.setEntry/"
      },
      "get": {
        "name": "apoc.map.get(map,key,[default],[fail=true]) - returns value for key or throws exception if key doesn't exist and no default given\n",
        "description": "apoc.map.get(map :: MAP?, key :: STRING?, value = null :: ANY?, fail = true :: BOOLEAN?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.get/"
      },
      "fromNodes": {
        "name": "apoc.map.fromNodes(label, property)\n",
        "description": "apoc.map.fromNodes(label :: STRING?, property :: STRING?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.fromNodes/"
      },
      "fromLists": {
        "name": "apoc.map.fromLists([keys],[values])\n",
        "description": "apoc.map.fromLists(keys :: LIST? OF STRING?, values :: LIST? OF ANY?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.fromLists/"
      },
      "submap": {
        "name": "apoc.map.submap(map,keys,[defaults],[fail=true])  - returns submap for keys or throws exception if one of the key doesn't exist and no default value given at that position\n",
        "description": "apoc.map.submap(map :: MAP?, keys :: LIST? OF STRING?, values = [] :: LIST? OF ANY?, fail = true :: BOOLEAN?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.submap/"
      },
      "sortedProperties": {
        "name": "apoc.map.sortedProperties(map, ignoreCase:true) - returns a list of key/value list pairs, with pairs sorted by keys alphabetically, with optional case sensitivity\n",
        "description": "apoc.map.sortedProperties(map :: MAP?, ignoreCase = true :: BOOLEAN?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.sortedProperties/"
      },
      "setLists": {
        "name": "apoc.map.setLists(map,[keys],[values])\n",
        "description": "apoc.map.setLists(map :: MAP?, keys :: LIST? OF STRING?, values :: LIST? OF ANY?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.setLists/"
      },
      "mergeList": {
        "name": "apoc.map.mergeList([\\{maps}]) yield value - merges all maps in the list into one\n",
        "description": "apoc.map.mergeList(maps :: LIST? OF MAP?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.mergeList/"
      },
      "clean": {
        "name": "apoc.map.clean(map,[skip,keys],[skip,values]) yield map filters the keys and values contained in those lists, good for data cleaning from CSV/JSON\n",
        "description": "apoc.map.clean(map :: MAP?, keys :: LIST? OF STRING?, values :: LIST? OF ANY?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.clean/"
      },
      "groupBy": {
        "name": "apoc.map.groupBy([maps/nodes/relationships],'key') yield value - creates a map of the list keyed by the given property, with single values\n",
        "description": "apoc.map.groupBy(values :: LIST? OF ANY?, key :: STRING?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.groupBy/"
      },
      "groupByMulti": {
        "name": "apoc.map.groupByMulti([maps/nodes/relationships],'key') yield value - creates a map of the list keyed by the given property, with list values\n",
        "description": "apoc.map.groupByMulti(values :: LIST? OF ANY?, key :: STRING?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.groupByMulti/"
      },
      "setValues": {
        "name": "apoc.map.setValues(map,[key1,value1,key2,value2])\n",
        "description": "apoc.map.setValues(map :: MAP?, pairs :: LIST? OF ANY?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.setValues/"
      },
      "mget": {
        "name": "apoc.map.mget(map,key,[defaults],[fail=true])  - returns list of values for keys or throws exception if one of the key doesn't exist and no default value given at that position\n",
        "description": "apoc.map.mget(map :: MAP?, keys :: LIST? OF STRING?, values = [] :: LIST? OF ANY?, fail = true :: BOOLEAN?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.mget/"
      },
      "merge": {
        "name": "apoc.map.merge(first,second) - merges two maps\n",
        "description": "apoc.map.merge(first :: MAP?, second :: MAP?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.merge/"
      },
      "fromValues": {
        "name": "apoc.map.fromValues([key1,value1,key2,value2,...])\n",
        "description": "apoc.map.fromValues(values :: LIST? OF ANY?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.fromValues/"
      },
      "updateTree": {
        "name": "apoc.map.updateTree(tree,key,[[value,\\{data}]]) returns map - adds the \\{data} map on each level of the nested tree, where the key-value pairs match\n",
        "description": "apoc.map.updateTree(tree :: MAP?, key :: STRING?, data :: LIST? OF LIST? OF ANY?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.updateTree/"
      },
      "fromPairs": {
        "name": "apoc.map.fromPairs([[key,value],[key2,value2],...])\n",
        "description": "apoc.map.fromPairs(pairs :: LIST? OF LIST? OF ANY?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.fromPairs/"
      },
      "setPairs": {
        "name": "apoc.map.setPairs(map,[[key1,value1],[key2,value2])\n",
        "description": "apoc.map.setPairs(map :: MAP?, pairs :: LIST? OF LIST? OF ANY?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.map/apoc.map.setPairs/"
      }
    },
    "es": {
      "stats": {
        "name": "apoc.es.stats(host-url-Key) - elastic search statistics\n",
        "description": "apoc.es.stats(host :: STRING?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.es/apoc.es.stats/"
      },
      "postRaw": {
        "name": "apoc.es.postRaw(host-or-port,path,payload-or-null) yield value - perform a raw POST operation on elastic search\n",
        "description": "apoc.es.postRaw(host :: STRING?, path :: STRING?, payload :: ANY?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.es/apoc.es.postRaw/"
      },
      "post": {
        "name": "apoc.es.post(host-or-port,index-or-null,type-or-null,query-or-null,payload-or-null) yield value - perform a POST operation on elastic search\n",
        "description": "apoc.es.post(host :: STRING?, index :: STRING?, type :: STRING?, query :: ANY?, payload = {} :: MAP?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.es/apoc.es.post/"
      },
      "getRaw": {
        "name": "apoc.es.getRaw(host-or-port,path,payload-or-null) yield value - perform a raw GET operation on elastic search\n",
        "description": "apoc.es.getRaw(host :: STRING?, path :: STRING?, payload :: ANY?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.es/apoc.es.getRaw/"
      },
      "put": {
        "name": "apoc.es.put(host-or-port,index-or-null,type-or-null,id-or-null,query-or-null,payload-or-null) yield value - perform a PUT operation on elastic search\n",
        "description": "apoc.es.put(host :: STRING?, index :: STRING?, type :: STRING?, id :: STRING?, query :: ANY?, payload = {} :: MAP?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.es/apoc.es.put/"
      },
      "get": {
        "name": "apoc.es.get(host-or-port,index-or-null,type-or-null,id-or-null,query-or-null,payload-or-null) yield value - perform a GET operation on elastic search\n",
        "description": "apoc.es.get(host :: STRING?, index :: STRING?, type :: STRING?, id :: STRING?, query :: ANY?, payload :: ANY?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.es/apoc.es.get/"
      },
      "query": {
        "name": "apoc.es.query(host-or-port,index-or-null,type-or-null,query-or-null,payload-or-null) yield value - perform a SEARCH operation on elastic search\n",
        "description": "apoc.es.query(host :: STRING?, index :: STRING?, type :: STRING?, query :: ANY?, payload :: ANY?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.es/apoc.es.query/"
      }
    },
    "agg": {
      "maxItems": {
        "name": "apoc.agg.maxItems(item, value, groupLimit: -1) - returns a map {items:[], value:n} where `value` is the maximum value present, and `items` are all items with the same value. The number of items can be optionally limited.\n",
        "description": "apoc.agg.maxItems(item :: ANY?, value :: ANY?, groupLimit = -1 :: INTEGER?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.agg/apoc.agg.maxItems/"
      },
      "slice": {
        "name": "apoc.agg.slice(value, start, length) - returns subset of non-null values, start is 0 based and length can be -1\n",
        "description": "apoc.agg.slice(value :: ANY?, from = 0 :: INTEGER?, to = -1 :: INTEGER?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.agg/apoc.agg.slice/"
      },
      "percentiles": {
        "name": "apoc.agg.percentiles(value,[percentiles = 0.5,0.75,0.9,0.95,0.99]) - returns given percentiles for values\n",
        "description": "apoc.agg.percentiles(value :: NUMBER?, percentiles = [0.5, 0.75, 0.9, 0.95, 0.99] :: LIST? OF FLOAT?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.agg/apoc.agg.percentiles/"
      },
      "graph": {
        "name": "apoc.agg.graph(path) - returns map of graph {nodes, relationships} of all distinct nodes and relationships\n",
        "description": "apoc.agg.graph(element :: ANY?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.agg/apoc.agg.graph/"
      },
      "statistics": {
        "name": "apoc.agg.statistics(value,[percentiles = 0.5,0.75,0.9,0.95,0.99]) - returns numeric statistics (percentiles, min,minNonZero,max,total,mean,stdev) for values\n",
        "description": "apoc.agg.statistics(value :: NUMBER?, percentiles = [0.5, 0.75, 0.9, 0.95, 0.99] :: LIST? OF FLOAT?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.agg/apoc.agg.statistics/"
      },
      "minItems": {
        "name": "apoc.agg.minItems(item, value, groupLimit: -1) - returns a map {items:[], value:n} where `value` is the minimum value present, and `items` are all items with the same value. The number of items can be optionally limited.\n",
        "description": "apoc.agg.minItems(item :: ANY?, value :: ANY?, groupLimit = -1 :: INTEGER?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.agg/apoc.agg.minItems/"
      },
      "median": {
        "name": "apoc.agg.median(number) - returns median for non-null numeric values\n",
        "description": "apoc.agg.median(value :: ANY?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.agg/apoc.agg.median/"
      },
      "product": {
        "name": "apoc.agg.product(number) - returns given product for non-null values\n",
        "description": "apoc.agg.product(number :: NUMBER?) :: (NUMBER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.agg/apoc.agg.product/"
      },
      "last": {
        "name": "apoc.agg.last(value) - returns last value\n",
        "description": "apoc.agg.last(value :: ANY?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.agg/apoc.agg.last/"
      },
      "first": {
        "name": "apoc.agg.first(value) - returns first value\n",
        "description": "apoc.agg.first(value :: ANY?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.agg/apoc.agg.first/"
      },
      "nth": {
        "name": "apoc.agg.nth(value,offset) - returns value of nth row (or -1 for last)\n",
        "description": "apoc.agg.nth(value :: ANY?, value :: INTEGER?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.agg/apoc.agg.nth/"
      }
    },
    "uuid": {
      "install": {
        "name": "CALL apoc.uuid.install(label, {addToExistingNodes: true/false, uuidProperty: 'uuid'}) yield label, installed, properties, batchComputationResult | it will add the uuid transaction handler\nfor the provided `label` and `uuidProperty`, in case the UUID handler is already present it will be replaced by the new one",
        "description": "apoc.uuid.install(label :: STRING?, config = {} :: MAP?) :: (batchComputationResult :: MAP?, label :: STRING?, installed :: BOOLEAN?, properties :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.uuid/apoc.uuid.install/"
      },
      "list": {
        "name": "CALL apoc.uuid.list() yield label, installed, properties | provides a list of all the uuid handlers installed with the related configuration\n",
        "description": "apoc.uuid.list() :: (label :: STRING?, installed :: BOOLEAN?, properties :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.uuid/apoc.uuid.list/"
      },
      "remove": {
        "name": "CALL apoc.uuid.remove(label) yield label, installed, properties | remove previously added uuid handler and returns uuid information. All the existing uuid properties are left as-is\n",
        "description": "apoc.uuid.remove(label :: STRING?) :: (label :: STRING?, installed :: BOOLEAN?, properties :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.uuid/apoc.uuid.remove/"
      },
      "removeAll": {
        "name": "CALL apoc.uuid.removeAll() yield label, installed, properties | it removes all previously added uuid handlers and returns uuids information. All the existing uuid properties are left as-is\n",
        "description": "apoc.uuid.removeAll() :: (label :: STRING?, installed :: BOOLEAN?, properties :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.uuid/apoc.uuid.removeAll/"
      }
    },
    "systemdb": {
      "graph": {
        "name": "apoc.systemdb.graph() :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?)\n----",
        "description": "",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.systemdb/apoc.systemdb.graph/"
      },
      "execute": {
        "name": "apoc.systemdb.execute(DDL commands, either a string or a list of strings :: ANY?, params = {} :: MAP?) :: (row :: MAP?)\n----",
        "description": "",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.systemdb/apoc.systemdb.execute/"
      }
    },
    "schema": {
      "properties": {
        "name": "apoc.schema.properties.distinct(label, key) - quickly returns all distinct values for a given key\n",
        "description": "apoc.schema.properties.distinct(label :: STRING?, key :: STRING?) :: (value :: LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.schema/apoc.schema.properties.distinct/"
      },
      "node": {
        "name": "RETURN apoc.schema.node.indexExists(labelName, propertyNames)\n",
        "description": "apoc.schema.node.indexExists(labelName :: STRING?, propertyName :: LIST? OF STRING?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.schema/apoc.schema.node.indexExists/"
      },
      "nodes": {
        "name": "CALL apoc.schema.nodes([config]) yield name, label, properties, status, type\n",
        "description": "apoc.schema.nodes(config = {} :: MAP?) :: (name :: STRING?, label :: STRING?, properties :: LIST? OF STRING?, status :: STRING?, type :: STRING?, failure :: STRING?, populationProgress :: FLOAT?, size :: INTEGER?, valuesSelectivity :: FLOAT?, userDescription :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.schema/apoc.schema.nodes/"
      },
      "assert": {
        "name": "apoc.schema.assert({indexLabel:[[indexKeys]], ...}, {constraintLabel:[constraintKeys], ...}, dropExisting : true) yield label, key, keys, unique, action - drops all other existing indexes and constraints when `dropExisting` is `true` (default is `true`), and asserts that at the end of the operation the given indexes and unique constraints are there, each label:key pair is considered one constraint/label. Non-constraint indexes can define compound indexes with label:[key1,key2...] pairings.\n",
        "description": "apoc.schema.assert(indexes :: MAP?, constraints :: MAP?, dropExisting = true :: BOOLEAN?) :: (label :: STRING?, key :: STRING?, keys :: LIST? OF STRING?, unique :: BOOLEAN?, action :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.schema/apoc.schema.assert/"
      },
      "relationships": {
        "name": "CALL apoc.schema.relationships([config]) yield name, startLabel, type, endLabel, properties, status\n",
        "description": "apoc.schema.relationships(config = {} :: MAP?) :: (name :: STRING?, type :: STRING?, properties :: LIST? OF STRING?, status :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.schema/apoc.schema.relationships/"
      },
      "relationship": {
        "name": "RETURN apoc.schema.relationship.constraintExists(type, propertyNames)\n",
        "description": "apoc.schema.relationship.constraintExists(type :: STRING?, propertyName :: LIST? OF STRING?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.schema/apoc.schema.relationship.constraintExists/"
      }
    },
    "label": {
      "exists": {
        "name": "apoc.label.exists(element, label) - returns true or false related to label existance\n",
        "description": "apoc.label.exists(node :: ANY?, label :: STRING?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.label/apoc.label.exists/"
      }
    },
    "neighbors": {
      "athop": {
        "name": "apoc.neighbors.athop.count(node, rel-direction-pattern, distance) - returns distinct nodes of the given relationships in the pattern at a distance, can use '>' or '<' for all outgoing or incoming relationships\n",
        "description": "apoc.neighbors.athop.count(node :: NODE?, types =  :: STRING?, distance = 1 :: INTEGER?) :: (value :: INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.neighbors/apoc.neighbors.athop.count/"
      },
      "byhop": {
        "name": "apoc.neighbors.byhop(node, rel-direction-pattern, distance) - returns distinct nodes of the given relationships in the pattern at each distance, can use '>' or '<' for all outgoing or incoming relationships\n",
        "description": "apoc.neighbors.byhop(node :: NODE?, types =  :: STRING?, distance = 1 :: INTEGER?) :: (nodes :: LIST? OF NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.neighbors/apoc.neighbors.byhop/"
      },
      "tohop": {
        "name": "apoc.neighbors.tohop.count(node, rel-direction-pattern, distance) - returns distinct count of nodes of the given relationships in the pattern up to a certain distance, can use '>' or '<' for all outgoing or incoming relationships\n",
        "description": "apoc.neighbors.tohop.count(node :: NODE?, types =  :: STRING?, distance = 1 :: INTEGER?) :: (value :: INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.neighbors/apoc.neighbors.tohop.count/"
      }
    },
    "any": {
      "property": {
        "name": "returns property for virtual and real, nodes, rels and maps\n",
        "description": "apoc.any.property(thing :: ANY?, key :: STRING?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.any/apoc.any.property/"
      },
      "properties": {
        "name": "returns properties for virtual and real, nodes, rels and maps\n",
        "description": "apoc.any.properties(thing :: ANY?, keys = null :: LIST? OF STRING?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.any/apoc.any.properties/"
      }
    },
    "mongodb": {
      "count": {
        "name": "apoc.mongodb.count(host-or-key,db,collection,query) yield value - perform a find operation on mongodb collection\n",
        "description": "apoc.mongodb.count(host :: STRING?, db :: STRING?, collection :: STRING?, query :: MAP?) :: (value :: INTEGER?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.mongodb/apoc.mongodb.count/"
      },
      "first": {
        "name": "apoc.mongodb.first(host-or-key,db,collection,query,[compatibleValues=false|true],[extractReferences=false|true],[objectIdAsMap=true|false]) yield value - perform a first operation on mongodb collection\n",
        "description": "apoc.mongodb.first(host :: STRING?, db :: STRING?, collection :: STRING?, query :: MAP?, compatibleValues = true :: BOOLEAN?, extractReferences = false :: BOOLEAN?, objectIdAsMap = true :: BOOLEAN?) :: (value :: MAP?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.mongodb/apoc.mongodb.first/"
      },
      "delete": {
        "name": "apoc.mongodb.delete(host-or-key,db,collection,query) - delete the given documents from the mongodb collection and returns the number of affected documents\n",
        "description": "apoc.mongodb.delete(host :: STRING?, db :: STRING?, collection :: STRING?, query :: MAP?) :: (value :: INTEGER?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.mongodb/apoc.mongodb.delete/"
      },
      "get": {
        "name": "apoc.mongodb.get.byObjectId(hostOrKey, db, collection, objectIdValue, config(default:{})) - get the document by Object id value\n",
        "description": "apoc.mongodb.get.byObjectId(host :: STRING?, db :: STRING?, collection :: STRING?, objectIdValue :: STRING?, config = {} :: MAP?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.mongodb/apoc.mongodb.get.byObjectId/"
      },
      "find": {
        "name": "apoc.mongodb.find(host-or-key,db,collection,query,projection,sort,[compatibleValues=false|true],skip-or-null,limit-or-null,[extractReferences=false|true],[objectIdAsMap=true|false]) yield value - perform a find,project,sort operation on mongodb collection\n",
        "description": "apoc.mongodb.find(host :: STRING?, db :: STRING?, collection :: STRING?, query :: MAP?, project :: MAP?, sort :: MAP?, compatibleValues = false :: BOOLEAN?, skip = 0 :: INTEGER?, limit = 0 :: INTEGER?, extractReferences = false :: BOOLEAN?, objectIdAsMap = true :: BOOLEAN?) :: (value :: MAP?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.mongodb/apoc.mongodb.find/"
      },
      "insert": {
        "name": "apoc.mongodb.insert(host-or-key,db,collection,documents) - inserts the given documents into the mongodb collection\n",
        "description": "apoc.mongodb.insert(host :: STRING?, db :: STRING?, collection :: STRING?, documents :: LIST? OF MAP?) :: VOID\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.mongodb/apoc.mongodb.insert/"
      },
      "update": {
        "name": "apoc.mongodb.update(host-or-key,db,collection,query,update) - updates the given documents from the mongodb collection and returns the number of affected documents\n",
        "description": "apoc.mongodb.update(host :: STRING?, db :: STRING?, collection :: STRING?, query :: MAP?, update :: MAP?) :: (value :: INTEGER?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.mongodb/apoc.mongodb.update/"
      }
    },
    "get": {
      "nodes": {
        "name": "apoc.get.nodes(node|id|[ids]) - quickly returns all nodes with these id's\n",
        "description": "apoc.get.nodes(nodes :: ANY?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.get/apoc.get.nodes/"
      },
      "rels": {
        "name": "apoc.get.rels(rel|id|[ids]) - quickly returns all relationships with these id's\n",
        "description": "apoc.get.rels(relationships :: ANY?) :: (rel :: RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.get/apoc.get.rels/"
      }
    },
    "bolt": {
      "load": {
        "name": "apoc.bolt.load.fromLocal(url :: STRING?, localStatement :: STRING?, remoteStatement :: STRING?, config = {} :: MAP?) :: (row :: MAP?)\n----",
        "description": "",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.bolt/apoc.bolt.load.fromLocal/"
      },
      "execute": {
        "name": "apoc.bolt.execute(url-or-key, kernelTransaction, params, config) - access to other databases via bolt for read\n",
        "description": "apoc.bolt.execute(url :: STRING?, kernelTransaction :: STRING?, params = {} :: MAP?, config = {} :: MAP?) :: (row :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.bolt/apoc.bolt.execute/"
      }
    },
    "search": {
      "nodeAll": {
        "name": "Do a parallel search over multiple indexes returning nodes. usage apoc.search.nodeAll( map of label and properties which will be searched upon, operator: EXACT | CONTAINS | STARTS WITH | ENDS WITH, searchValue ) returns all the Nodes found in the different searches.\n",
        "description": "apoc.search.nodeAll(LabelPropertyMap :: ANY?, operator :: STRING?, value :: STRING?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.search/apoc.search.nodeAll/"
      },
      "nodeReduced": {
        "name": "Do a parallel search over multiple indexes returning a reduced representation of the nodes found: node id, labels and the searched properties. apoc.search.nodeReduced( map of label and properties which will be searched upon, operator: EXACT | CONTAINS | STARTS WITH | ENDS WITH, searchValue ). Multiple search results for the same node are merged into one record.\n",
        "description": "apoc.search.nodeReduced(LabelPropertyMap :: ANY?, operator :: STRING?, value :: STRING?) :: (id :: INTEGER?, labels :: LIST? OF STRING?, values :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.search/apoc.search.nodeReduced/"
      },
      "nodeAllReduced": {
        "name": "Do a parallel search over multiple indexes returning a reduced representation of the nodes found: node id, labels and the searched property. apoc.search.nodeShortAll( map of label and properties which will be searched upon, operator: EXACT / CONTAINS / STARTS WITH | ENDS WITH / = / <> / < / > ..., value ). All 'hits' are returned.\n",
        "description": "apoc.search.nodeAllReduced(LabelPropertyMap :: ANY?, operator :: STRING?, value :: ANY?) :: (id :: INTEGER?, labels :: LIST? OF STRING?, values :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.search/apoc.search.nodeAllReduced/"
      },
      "node": {
        "name": "Do a parallel search over multiple indexes returning nodes. usage apoc.search.node( map of label and properties which will be searched upon, operator: EXACT | CONTAINS | STARTS WITH | ENDS WITH, searchValue ) returns all the DISTINCT Nodes found in the different searches.\n",
        "description": "apoc.search.node(LabelPropertyMap :: ANY?, operator :: STRING?, value :: STRING?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.search/apoc.search.node/"
      },
      "multiSearchReduced": {
        "name": "Do a parallel search over multiple indexes returning a reduced representation of the nodes found: node id, labels and the searched properties. apoc.search.multiSearchReduced( map of label and properties which will be searched upon, operator: EXACT | CONTAINS | STARTS WITH | ENDS WITH, searchValue ). Multiple search results for the same node are merged into one record.\n",
        "description": "apoc.search.multiSearchReduced(LabelPropertyMap :: ANY?, operator :: STRING?, value :: STRING?) :: (id :: INTEGER?, labels :: LIST? OF STRING?, values :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.search/apoc.search.multiSearchReduced/"
      }
    },
    "merge": {
      "node": {
        "name": "\"apoc.merge.node.eager(['Label'], identProps:{key:value, ...}, onCreateProps:{key:value,...}, onMatchProps:{key:value,...}}) - merge nodes with dynamic labels, with support for setting properties ON CREATE or ON MATCH\n",
        "description": "apoc.merge.node(label :: LIST? OF STRING?, identProps :: MAP?, props = {} :: MAP?, onMatchProps = {} :: MAP?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.merge/apoc.merge.node/"
      },
      "relationship": {
        "name": "apoc.merge.relationship(startNode, relType,  identProps:{key:value, ...}, onCreateProps:{key:value, ...}, endNode, onMatchProps:{key:value, ...}) - merge relationship with dynamic type, with support for setting properties ON CREATE or ON MATCH\n",
        "description": "apoc.merge.relationship.eager(startNode :: NODE?, relationshipType :: STRING?, identProps :: MAP?, props :: MAP?, endNode :: NODE?, onMatchProps = {} :: MAP?) :: (rel :: RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.merge/apoc.merge.relationship.eager/"
      }
    },
    "json": {
      "path": {
        "name": "apoc.json.path('\\{json}','json-path')\n",
        "description": "apoc.json.path(json :: STRING?, path = $ :: STRING?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.json/apoc.json.path/"
      }
    },
    "config": {
      "map": {
        "name": "apoc.config.map | Lists the Neo4j configuration as map\n",
        "description": "apoc.config.map() :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.config/apoc.config.map/"
      },
      "list": {
        "name": "apoc.config.list | Lists the Neo4j configuration as key,value table\n",
        "description": "apoc.config.list() :: (key :: STRING?, value :: ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.config/apoc.config.list/"
      }
    },
    "diff": {
      "nodes": {
        "name": "apoc.diff.nodes(leftNode :: NODE?, rightNode :: NODE?) :: (MAP?)\n----",
        "description": "",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.diff/apoc.diff.nodes/"
      }
    },
    "trigger": {
      "nodesByLabel": {
        "name": "apoc.trigger.nodesByLabel(labelEntries :: ANY?, label :: STRING?) :: (LIST? OF ANY?)\n----",
        "description": "",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.trigger/apoc.trigger.nodesByLabel/"
      },
      "propertiesByKey": {
        "name": "apoc.trigger.propertiesByKey(propertyEntries :: MAP?, key :: STRING?) :: (LIST? OF ANY?)\n----",
        "description": "",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.trigger/apoc.trigger.propertiesByKey/"
      },
      "remove": {
        "name": "remove previously added trigger, returns trigger information\n",
        "description": "apoc.trigger.remove(name :: STRING?) :: (name :: STRING?, query :: STRING?, selector :: MAP?, params :: MAP?, installed :: BOOLEAN?, paused :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.trigger/apoc.trigger.remove/"
      },
      "add": {
        "name": "add a trigger kernelTransaction under a name, in the kernelTransaction you can use \\{createdNodes}, \\{deletedNodes} etc., the selector is {phase:'before/after/rollback'} returns previous and new trigger information. Takes in an optional configuration.\n",
        "description": "apoc.trigger.add(name :: STRING?, kernelTransaction :: STRING?, selector :: MAP?, config = {} :: MAP?) :: (name :: STRING?, query :: STRING?, selector :: MAP?, params :: MAP?, installed :: BOOLEAN?, paused :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.trigger/apoc.trigger.add/"
      },
      "list": {
        "name": "list all installed triggers\n",
        "description": "apoc.trigger.list() :: (name :: STRING?, query :: STRING?, selector :: MAP?, params :: MAP?, installed :: BOOLEAN?, paused :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.trigger/apoc.trigger.list/"
      },
      "removeAll": {
        "name": "removes all previously added trigger, returns trigger information\n",
        "description": "apoc.trigger.removeAll() :: (name :: STRING?, query :: STRING?, selector :: MAP?, params :: MAP?, installed :: BOOLEAN?, paused :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.trigger/apoc.trigger.removeAll/"
      },
      "resume": {
        "name": "CALL apoc.trigger.resume(name) | it resumes the paused trigger\n",
        "description": "apoc.trigger.resume(name :: STRING?) :: (name :: STRING?, query :: STRING?, selector :: MAP?, params :: MAP?, installed :: BOOLEAN?, paused :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.trigger/apoc.trigger.resume/"
      },
      "pause": {
        "name": "CALL apoc.trigger.pause(name) | it pauses the trigger\n",
        "description": "apoc.trigger.pause(name :: STRING?) :: (name :: STRING?, query :: STRING?, selector :: MAP?, params :: MAP?, installed :: BOOLEAN?, paused :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.trigger/apoc.trigger.pause/"
      }
    },
    "atomic": {
      "insert": {
        "name": "apoc.atomic.insert(node/relatonship,propertyName,position,value) insert a value into the property's array value at 'position'\n",
        "description": "apoc.atomic.insert(container :: ANY?, propertyName :: STRING?, position :: INTEGER?, value :: ANY?, times = 5 :: INTEGER?) :: (container :: ANY?, property :: STRING?, oldValue :: ANY?, newValue :: ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.atomic/apoc.atomic.insert/"
      },
      "concat": {
        "name": "apoc.atomic.concat(node/relatonship,propertyName,string) Concats the property's value with the 'string' value\n",
        "description": "apoc.atomic.concat(container :: ANY?, propertyName :: STRING?, string :: STRING?, times = 5 :: INTEGER?) :: (container :: ANY?, property :: STRING?, oldValue :: ANY?, newValue :: ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.atomic/apoc.atomic.concat/"
      },
      "subtract": {
        "name": "apoc.atomic.subtract(node/relatonship,propertyName,number) Subtracts the 'number' value to the property's value\n",
        "description": "apoc.atomic.subtract(container :: ANY?, propertyName :: STRING?, number :: NUMBER?, times = 5 :: INTEGER?) :: (container :: ANY?, property :: STRING?, oldValue :: ANY?, newValue :: ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.atomic/apoc.atomic.subtract/"
      },
      "remove": {
        "name": "apoc.atomic.remove(node/relatonship,propertyName,position) remove the element at position 'position'\n",
        "description": "apoc.atomic.remove(container :: ANY?, propertyName :: STRING?, position :: INTEGER?, times = 5 :: INTEGER?) :: (container :: ANY?, property :: STRING?, oldValue :: ANY?, newValue :: ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.atomic/apoc.atomic.remove/"
      },
      "update": {
        "name": "apoc.atomic.update(node/relatonship,propertyName,updateOperation) update a property's value with a cypher operation (ex. \"n.prop1+n.prop2\")\n",
        "description": "apoc.atomic.update(container :: ANY?, propertyName :: STRING?, operation :: STRING?, times = 5 :: INTEGER?) :: (container :: ANY?, property :: STRING?, oldValue :: ANY?, newValue :: ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.atomic/apoc.atomic.update/"
      },
      "add": {
        "name": "apoc.atomic.add(node/relatonship,propertyName,number) Sums the property's value with the 'number' value\n",
        "description": "apoc.atomic.add(container :: ANY?, propertyName :: STRING?, number :: NUMBER?, times = 5 :: INTEGER?) :: (container :: ANY?, property :: STRING?, oldValue :: ANY?, newValue :: ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.atomic/apoc.atomic.add/"
      }
    },
    "cluster": {
      "graph": {
        "name": "apoc.cluster.graph() :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?)\n----",
        "description": "",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.cluster/apoc.cluster.graph/"
      }
    },
    "custom": {
      "declareFunction": {
        "name": "apoc.custom.declareFunction(signature, statement, forceSingle, description) - register a custom cypher function\n",
        "description": "apoc.custom.declareFunction(signature :: STRING?, statement :: STRING?, forceSingle = false :: BOOLEAN?, description =  :: STRING?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.custom/apoc.custom.declareFunction/"
      },
      "asProcedure": {
        "name": "apoc.custom.asProcedure(name, statement, mode, outputs, inputs, description) - register a custom cypher procedure\n",
        "description": "apoc.custom.asProcedure(name :: STRING?, statement :: STRING?, mode = read :: STRING?, outputs = null :: LIST? OF LIST? OF STRING?, inputs = null :: LIST? OF LIST? OF STRING?, description =  :: STRING?) :: VOID\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.custom/apoc.custom.asProcedure/"
      },
      "removeProcedure": {
        "name": "apoc.custom.removeProcedure(name) - remove the targeted custom procedure\n",
        "description": "apoc.custom.removeProcedure(name :: STRING?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.custom/apoc.custom.removeProcedure/"
      },
      "removeFunction": {
        "name": "apoc.custom.removeFunction(name, type) - remove the targeted custom function\n",
        "description": "apoc.custom.removeFunction(name :: STRING?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.custom/apoc.custom.removeFunction/"
      },
      "asFunction": {
        "name": "apoc.custom.asFunction(name, statement, outputs, inputs, forceSingle, description) - register a custom cypher function\n",
        "description": "apoc.custom.asFunction(name :: STRING?, statement :: STRING?, outputs =  :: STRING?, inputs = null :: LIST? OF LIST? OF STRING?, forceSingle = false :: BOOLEAN?, description =  :: STRING?) :: VOID\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.custom/apoc.custom.asFunction/"
      },
      "list": {
        "name": "apoc.custom.list() - provide a list of custom procedures/function registered\n",
        "description": "apoc.custom.list() :: (type :: STRING?, name :: STRING?, description :: STRING?, mode :: STRING?, statement :: STRING?, inputs :: LIST? OF LIST? OF STRING?, outputs :: ANY?, forceSingle :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.custom/apoc.custom.list/"
      },
      "declareProcedure": {
        "name": "apoc.custom.declareProcedure(signature, statement, mode, description) - register a custom cypher procedure\n",
        "description": "apoc.custom.declareProcedure(signature :: STRING?, statement :: STRING?, mode = read :: STRING?, description =  :: STRING?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.custom/apoc.custom.declareProcedure/"
      }
    },
    "periodic": {
      "truncate": {
        "name": "apoc.periodic.truncate(\\{config}) - removes all entities (and optionally indexes and constraints) from db using the apoc.periodic.iterate under the hood\n",
        "description": "apoc.periodic.truncate(config = {} :: MAP?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.periodic/apoc.periodic.truncate/"
      },
      "list": {
        "name": "apoc.periodic.list - list all jobs\n",
        "description": "apoc.periodic.list() :: (name :: STRING?, delay :: INTEGER?, rate :: INTEGER?, done :: BOOLEAN?, cancelled :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.periodic/apoc.periodic.list/"
      },
      "commit": {
        "name": "apoc.periodic.commit(statement,params) - runs the given statement in separate transactions until it returns 0\n",
        "description": "apoc.periodic.commit(statement :: STRING?, params = {} :: MAP?) :: (updates :: INTEGER?, executions :: INTEGER?, runtime :: INTEGER?, batches :: INTEGER?, failedBatches :: INTEGER?, batchErrors :: MAP?, failedCommits :: INTEGER?, commitErrors :: MAP?, wasTerminated :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.periodic/apoc.periodic.commit/"
      },
      "repeat": {
        "name": "apoc.periodic.repeat('name',statement,repeat-rate-in-seconds, config) submit a repeatedly-called background statement. Fourth parameter 'config' is optional and can contain 'params' entry for nested statement.\n",
        "description": "apoc.periodic.repeat(name :: STRING?, statement :: STRING?, rate :: INTEGER?, config = {} :: MAP?) :: (name :: STRING?, delay :: INTEGER?, rate :: INTEGER?, done :: BOOLEAN?, cancelled :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.periodic/apoc.periodic.repeat/"
      },
      "rock_n_roll_while": {
        "name": "apoc.periodic.rock_n_roll_while('some cypher for knowing when to stop', 'some cypher for iteration', 'some cypher as action on each iteration', 10000) YIELD batches, total - run the action statement in batches over the iterator statement's results in a separate thread. Returns number of batches and total processed rows\n",
        "description": "apoc.periodic.rock_n_roll_while(cypherLoop :: STRING?, cypherIterate :: STRING?, cypherAction :: STRING?, batchSize :: INTEGER?) :: (loop :: ANY?, batches :: INTEGER?, total :: INTEGER?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.periodic/apoc.periodic.rock_n_roll_while/"
      },
      "rock_n_roll": {
        "name": "apoc.periodic.rock_n_roll('some cypher for iteration', 'some cypher as action on each iteration', 10000) YIELD batches, total - run the action statement in batches over the iterator statement's results in a separate thread. Returns number of batches and total processed rows\n",
        "description": "apoc.periodic.rock_n_roll(cypherIterate :: STRING?, cypherAction :: STRING?, batchSize :: INTEGER?) :: (batches :: INTEGER?, total :: INTEGER?, timeTaken :: INTEGER?, committedOperations :: INTEGER?, failedOperations :: INTEGER?, failedBatches :: INTEGER?, retries :: INTEGER?, errorMessages :: MAP?, batch :: MAP?, operations :: MAP?, wasTerminated :: BOOLEAN?, failedParams :: MAP?, updateStatistics :: MAP?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.periodic/apoc.periodic.rock_n_roll/"
      },
      "cancel": {
        "name": "apoc.periodic.cancel(name) - cancel job with the given name\n",
        "description": "apoc.periodic.cancel(name :: STRING?) :: (name :: STRING?, delay :: INTEGER?, rate :: INTEGER?, done :: BOOLEAN?, cancelled :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.periodic/apoc.periodic.cancel/"
      },
      "submit": {
        "name": "apoc.periodic.submit('name',statement) - submit a one-off background statement\n",
        "description": "apoc.periodic.submit(name :: STRING?, statement :: STRING?) :: (name :: STRING?, delay :: INTEGER?, rate :: INTEGER?, done :: BOOLEAN?, cancelled :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.periodic/apoc.periodic.submit/"
      },
      "countdown": {
        "name": "apoc.periodic.countdown('name',statement,repeat-rate-in-seconds) submit a repeatedly-called background statement until it returns 0\n",
        "description": "apoc.periodic.countdown(name :: STRING?, statement :: STRING?, rate :: INTEGER?) :: (name :: STRING?, delay :: INTEGER?, rate :: INTEGER?, done :: BOOLEAN?, cancelled :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.periodic/apoc.periodic.countdown/"
      },
      "iterate": {
        "name": "apoc.periodic.iterate('statement returning items', 'statement per item', {batchSize:1000,iterateList:true,parallel:false,params:{},concurrency:50,retries:0}) YIELD batches, total - run the second statement for each item returned by the first statement. Returns number of batches and total processed rows\n",
        "description": "apoc.periodic.iterate(cypherIterate :: STRING?, cypherAction :: STRING?, config :: MAP?) :: (batches :: INTEGER?, total :: INTEGER?, timeTaken :: INTEGER?, committedOperations :: INTEGER?, failedOperations :: INTEGER?, failedBatches :: INTEGER?, retries :: INTEGER?, errorMessages :: MAP?, batch :: MAP?, operations :: MAP?, wasTerminated :: BOOLEAN?, failedParams :: MAP?, updateStatistics :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.periodic/apoc.periodic.iterate/"
      }
    },
    "coll": {
      "avg": {
        "name": "apoc.coll.avg([0.5,1,2.3])\n",
        "description": "apoc.coll.avg(numbers :: LIST? OF NUMBER?) :: (FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.avg/"
      },
      "stdev": {
        "name": "apoc.coll.stdev(list, isBiasCorrected) - returns the sample or population standard deviation with isBiasCorrected true or false respectively. For example apoc.coll.stdev([10, 12, 23]) return 7\n",
        "description": "apoc.coll.stdev(list :: LIST? OF NUMBER?, isBiasCorrected = true :: BOOLEAN?) :: (NUMBER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.stdev/"
      },
      "containsAll": {
        "name": "apoc.coll.containsAll(coll, values) optimized contains-all operation (using a HashSet) (returns single row or not)\n",
        "description": "apoc.coll.containsAll(coll :: LIST? OF ANY?, values :: LIST? OF ANY?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.containsAll/"
      },
      "elements": {
        "name": "apoc.coll.elements(list,limit,offset) yield _1,_2,..,_10,_1s,_2i,_3f,_4m,_5l,_6n,_7r,_8p - deconstruct subset of mixed list into identifiers of the correct type\n",
        "description": "apoc.coll.elements(values :: LIST? OF ANY?, limit = -1 :: INTEGER?, offset = 0 :: INTEGER?) :: (_1 :: ANY?, _2 :: ANY?, _3 :: ANY?, _4 :: ANY?, _5 :: ANY?, _6 :: ANY?, _7 :: ANY?, _8 :: ANY?, _9 :: ANY?, _10 :: ANY?, _1s :: STRING?, _2s :: STRING?, _3s :: STRING?, _4s :: STRING?, _5s :: STRING?, _6s :: STRING?, _7s :: STRING?, _8s :: STRING?, _9s :: STRING?, _10s :: STRING?, _1i :: INTEGER?, _2i :: INTEGER?, _3i :: INTEGER?, _4i :: INTEGER?, _5i :: INTEGER?, _6i :: INTEGER?, _7i :: INTEGER?, _8i :: INTEGER?, _9i :: INTEGER?, _10i :: INTEGER?, _1f :: FLOAT?, _2f :: FLOAT?, _3f :: FLOAT?, _4f :: FLOAT?, _5f :: FLOAT?, _6f :: FLOAT?, _7f :: FLOAT?, _8f :: FLOAT?, _9f :: FLOAT?, _10f :: FLOAT?, _1b :: BOOLEAN?, _2b :: BOOLEAN?, _3b :: BOOLEAN?, _4b :: BOOLEAN?, _5b :: BOOLEAN?, _6b :: BOOLEAN?, _7b :: BOOLEAN?, _8b :: BOOLEAN?, _9b :: BOOLEAN?, _10b :: BOOLEAN?, _1l :: LIST? OF ANY?, _2l :: LIST? OF ANY?, _3l :: LIST? OF ANY?, _4l :: LIST? OF ANY?, _5l :: LIST? OF ANY?, _6l :: LIST? OF ANY?, _7l :: LIST? OF ANY?, _8l :: LIST? OF ANY?, _9l :: LIST? OF ANY?, _10l :: LIST? OF ANY?, _1m :: MAP?, _2m :: MAP?, _3m :: MAP?, _4m :: MAP?, _5m :: MAP?, _6m :: MAP?, _7m :: MAP?, _8m :: MAP?, _9m :: MAP?, _10m :: MAP?, _1n :: NODE?, _2n :: NODE?, _3n :: NODE?, _4n :: NODE?, _5n :: NODE?, _6n :: NODE?, _7n :: NODE?, _8n :: NODE?, _9n :: NODE?, _10n :: NODE?, _1r :: RELATIONSHIP?, _2r :: RELATIONSHIP?, _3r :: RELATIONSHIP?, _4r :: RELATIONSHIP?, _5r :: RELATIONSHIP?, _6r :: RELATIONSHIP?, _7r :: RELATIONSHIP?, _8r :: RELATIONSHIP?, _9r :: RELATIONSHIP?, _10r :: RELATIONSHIP?, _1p :: PATH?, _2p :: PATH?, _3p :: PATH?, _4p :: PATH?, _5p :: PATH?, _6p :: PATH?, _7p :: PATH?, _8p :: PATH?, _9p :: PATH?, _10p :: PATH?, elements :: INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.elements/"
      },
      "sortNodes": {
        "name": "apoc.coll.sortNodes([nodes], 'name') sort nodes by property\n",
        "description": "apoc.coll.sortNodes(coll :: LIST? OF NODE?, prop :: STRING?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.sortNodes/"
      },
      "sum": {
        "name": "apoc.coll.sum([0.5,1,2.3])\n",
        "description": "apoc.coll.sum(numbers :: LIST? OF NUMBER?) :: (FLOAT?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.sum/"
      },
      "sortMulti": {
        "name": "apoc.coll.sortMulti(coll, ['^name','age'],[limit],[skip]) - sort list of maps by several sort fields (ascending with ^ prefix) and optionally applies limit and skip\n",
        "description": "apoc.coll.sortMulti(coll :: LIST? OF MAP?, orderFields = [] :: LIST? OF STRING?, limit = -1 :: INTEGER?, skip = 0 :: INTEGER?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.sortMulti/"
      },
      "pairWithOffset": {
        "name": "apoc.coll.pairWithOffset(values, offset) - returns a list of pairs defined by the offset\n",
        "description": "apoc.coll.pairWithOffset(values :: LIST? OF ANY?, offset :: INTEGER?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.pairWithOffset/"
      },
      "zipToRows": {
        "name": "apoc.coll.zipToRows(list1,list2) - creates pairs like zip but emits one row per pair\n",
        "description": "apoc.coll.zipToRows(list1 :: LIST? OF ANY?, list2 :: LIST? OF ANY?) :: (value :: LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.zipToRows/"
      },
      "disjunction": {
        "name": "apoc.coll.disjunction(first, second) - returns the disjunct set of the two lists\n",
        "description": "apoc.coll.disjunction(first :: LIST? OF ANY?, second :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.disjunction/"
      },
      "intersection": {
        "name": "apoc.coll.intersection(first, second) - returns the unique intersection of the two lists\n",
        "description": "apoc.coll.intersection(first :: LIST? OF ANY?, second :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.intersection/"
      },
      "contains": {
        "name": "apoc.coll.contains(coll, value) optimized contains operation (using a HashSet) (returns single row or not)\n",
        "description": "apoc.coll.contains(coll :: LIST? OF ANY?, value :: ANY?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.contains/"
      },
      "insertAll": {
        "name": "apoc.coll.insertAll(coll, index, values) | insert values at index\n",
        "description": "apoc.coll.insertAll(coll :: LIST? OF ANY?, index :: INTEGER?, values :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.insertAll/"
      },
      "different": {
        "name": "apoc.coll.different(values) - returns true if values are different\n",
        "description": "apoc.coll.different(values :: LIST? OF ANY?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.different/"
      },
      "containsSorted": {
        "name": "apoc.coll.containsSorted(coll, value) optimized contains on a sorted list operation (Collections.binarySearch) (returns single row or not)\n",
        "description": "apoc.coll.containsSorted(coll :: LIST? OF ANY?, value :: ANY?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.containsSorted/"
      },
      "duplicatesWithCount": {
        "name": "apoc.coll.duplicatesWithCount(coll) - returns a list of duplicate items in the collection and their count, keyed by `item` and `count` (e.g., `[{item: xyz, count:2}, {item:zyx, count:5}]`)\n",
        "description": "apoc.coll.duplicatesWithCount(coll :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.duplicatesWithCount/"
      },
      "flatten": {
        "name": "apoc.coll.flatten(coll, [recursive]) - flattens list (nested if recursive is true)\n",
        "description": "apoc.coll.flatten(coll :: LIST? OF ANY?, recursive = false :: BOOLEAN?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.flatten/"
      },
      "randomItems": {
        "name": "apoc.coll.randomItems(coll, itemCount, allowRepick: false) - returns a list of itemCount random items from the original list, optionally allowing picked elements to be picked again\n",
        "description": "apoc.coll.randomItems(coll :: LIST? OF ANY?, itemCount :: INTEGER?, allowRepick = false :: BOOLEAN?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.randomItems/"
      },
      "toSet": {
        "name": "apoc.coll.toSet([list]) returns a unique list backed by a set\n",
        "description": "apoc.coll.toSet(values :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.toSet/"
      },
      "frequenciesAsMap": {
        "name": "apoc.coll.frequenciesAsMap(coll) - return a map of frequencies of the items in the collection, key `item`, value `count` (e.g., `{1:2, 2:1}`)\n",
        "description": "apoc.coll.frequenciesAsMap(coll :: LIST? OF ANY?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.frequenciesAsMap/"
      },
      "sumLongs": {
        "name": "apoc.coll.sumLongs([1,3,3])\n",
        "description": "apoc.coll.sumLongs(numbers :: LIST? OF NUMBER?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.sumLongs/"
      },
      "split": {
        "name": "apoc.coll.split(list,value) | splits collection on given values rows of lists, value itself will not be part of resulting lists\n",
        "description": "apoc.coll.split(values :: LIST? OF ANY?, value :: ANY?) :: (value :: LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.split/"
      },
      "dropDuplicateNeighbors": {
        "name": "apoc.coll.dropDuplicateNeighbors(list) - remove duplicate consecutive objects in a list\n",
        "description": "apoc.coll.dropDuplicateNeighbors(list :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.dropDuplicateNeighbors/"
      },
      "sortMaps": {
        "name": "apoc.coll.sortMaps([maps], 'name') - sort maps by property\n",
        "description": "apoc.coll.sortMaps(coll :: LIST? OF MAP?, prop :: STRING?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.sortMaps/"
      },
      "removeAll": {
        "name": "apoc.coll.removeAll(first, second) - returns first list with all elements of second list removed\n",
        "description": "apoc.coll.removeAll(first :: LIST? OF ANY?, second :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.removeAll/"
      },
      "duplicates": {
        "name": "apoc.coll.duplicates(coll) - returns a list of duplicate items in the collection\n",
        "description": "apoc.coll.duplicates(coll :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.duplicates/"
      },
      "subtract": {
        "name": "apoc.coll.subtract(first, second) - returns unique set of first list with all elements of second list removed\n",
        "description": "apoc.coll.subtract(first :: LIST? OF ANY?, second :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.subtract/"
      },
      "containsAllSorted": {
        "name": "apoc.coll.containsAllSorted(coll, value) optimized contains-all on a sorted list operation (Collections.binarySearch) (returns single row or not)\n",
        "description": "apoc.coll.containsAllSorted(coll :: LIST? OF ANY?, values :: LIST? OF ANY?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.containsAllSorted/"
      },
      "randomItem": {
        "name": "apoc.coll.randomItem(coll)- returns a random item from the list, or null on an empty or null list\n",
        "description": "apoc.coll.randomItem(coll :: LIST? OF ANY?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.randomItem/"
      },
      "sortText": {
        "name": "apoc.coll.sortText(coll) sort on string based collections\n",
        "description": "apoc.coll.sortText(coll :: LIST? OF STRING?, conf = {} :: MAP?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.sortText/"
      },
      "min": {
        "name": "apoc.coll.min([0.5,1,2.3])\n",
        "description": "apoc.coll.min(values :: LIST? OF ANY?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.min/"
      },
      "isEqualCollection": {
        "name": "apoc.coll.isEqualCollection(coll, values) return true if two collections contain the same elements with the same cardinality in any order (using a HashMap)\n",
        "description": "apoc.coll.isEqualCollection(coll :: LIST? OF ANY?, values :: LIST? OF ANY?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.isEqualCollection/"
      },
      "sort": {
        "name": "apoc.coll.sort(coll) sort on Collections\n",
        "description": "apoc.coll.sort(coll :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.sort/"
      },
      "partition": {
        "name": "apoc.coll.partition(list,batchSize)\n",
        "description": "apoc.coll.partition(values :: LIST? OF ANY?, batchSize :: INTEGER?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.partition/"
      },
      "combinations": {
        "name": "apoc.coll.combinations(coll, minSelect, maxSelect:minSelect) - Returns collection of all combinations of list elements of selection size between minSelect and maxSelect (default:minSelect), inclusive\n",
        "description": "apoc.coll.combinations(coll :: LIST? OF ANY?, minSelect :: INTEGER?, maxSelect = -1 :: INTEGER?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.combinations/"
      },
      "reverse": {
        "name": "apoc.coll.reverse(coll) - returns reversed list\n",
        "description": "apoc.coll.reverse(coll :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.reverse/"
      },
      "max": {
        "name": "apoc.coll.max([0.5,1,2.3])\n",
        "description": "apoc.coll.max(values :: LIST? OF ANY?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.max/"
      },
      "pairs": {
        "name": "apoc.coll.pairs([1,2,3]) returns [1,2],[2,3],[3,null]\n",
        "description": "apoc.coll.pairs(list :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.pairs/"
      },
      "set": {
        "name": "apoc.coll.set(coll, index, value) | set index to value\n",
        "description": "apoc.coll.set(coll :: LIST? OF ANY?, index :: INTEGER?, value :: ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.set/"
      },
      "shuffle": {
        "name": "apoc.coll.shuffle(coll) - returns the shuffled list\n",
        "description": "apoc.coll.shuffle(coll :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.shuffle/"
      },
      "containsDuplicates": {
        "name": "apoc.coll.containsDuplicates(coll) - returns true if a collection contains duplicate elements\n",
        "description": "apoc.coll.containsDuplicates(coll :: LIST? OF ANY?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.containsDuplicates/"
      },
      "indexOf": {
        "name": "apoc.coll.indexOf(coll, value) | position of value in the list\n",
        "description": "apoc.coll.indexOf(coll :: LIST? OF ANY?, value :: ANY?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.indexOf/"
      },
      "unionAll": {
        "name": "apoc.coll.unionAll(first, second) - creates the full union with duplicates of the two lists\n",
        "description": "apoc.coll.unionAll(first :: LIST? OF ANY?, second :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.unionAll/"
      },
      "zip": {
        "name": "apoc.coll.zip([list1],[list2])\n",
        "description": "apoc.coll.zip(list1 :: LIST? OF ANY?, list2 :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.zip/"
      },
      "runningTotal": {
        "name": "apoc.coll.runningTotal(list1) - returns an accumulative array. For example apoc.coll.runningTotal([1,2,3.5]) return [1,3,6.5]\n",
        "description": "apoc.coll.runningTotal(list :: LIST? OF NUMBER?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.runningTotal/"
      },
      "fill": {
        "name": "apoc.coll.fill(item, count) - returns a list with the given count of items\n",
        "description": "apoc.coll.fill(item :: STRING?, count :: INTEGER?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.fill/"
      },
      "union": {
        "name": "apoc.coll.union(first, second) - creates the distinct union of the 2 lists\n",
        "description": "apoc.coll.union(first :: LIST? OF ANY?, second :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.union/"
      },
      "insert": {
        "name": "apoc.coll.insert(coll, index, value) | insert value at index\n",
        "description": "apoc.coll.insert(coll :: LIST? OF ANY?, index :: INTEGER?, value :: ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.insert/"
      },
      "pairsMin": {
        "name": "apoc.coll.pairsMin([1,2,3]) returns [1,2],[2,3]\n",
        "description": "apoc.coll.pairsMin(list :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.pairsMin/"
      },
      "frequencies": {
        "name": "apoc.coll.frequencies(coll) - returns a list of frequencies of the items in the collection, keyed by `item` and `count` (e.g., `[{item: xyz, count:2}, {item:zyx, count:5}, {item:abc, count:1}]`)\n",
        "description": "apoc.coll.frequencies(coll :: LIST? OF ANY?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.frequencies/"
      },
      "remove": {
        "name": "apoc.coll.remove(coll, index, [length=1]) | remove range of values from index to length\n",
        "description": "apoc.coll.remove(coll :: LIST? OF ANY?, index :: INTEGER?, length = 1 :: INTEGER?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.remove/"
      },
      "occurrences": {
        "name": "apoc.coll.occurrences(coll, item) - returns the count of the given item in the collection\n",
        "description": "apoc.coll.occurrences(coll :: LIST? OF ANY?, item :: ANY?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.coll/apoc.coll.occurrences/"
      }
    },
    "nlp": {
      "gcp": {
        "name": "Classifies a document into categories.\n",
        "description": "apoc.nlp.gcp.classify.graph(source :: ANY?, config = {} :: MAP?) :: (graph :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.nlp/apoc.nlp.gcp.classify.graph/"
      },
      "aws": {
        "name": "Returns a stream of entities for provided text\n",
        "description": "apoc.nlp.aws.entities.stream(source :: ANY?, config = {} :: MAP?) :: (node :: NODE?, value :: MAP?, error :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.nlp/apoc.nlp.aws.entities.stream/"
      },
      "azure": {
        "name": "Creates a (virtual) key phrase graph for provided text\n",
        "description": "apoc.nlp.azure.keyPhrases.graph(source :: ANY?, config = {} :: MAP?) :: (graph :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.nlp/apoc.nlp.azure.keyPhrases.graph/"
      }
    },
    "refactor": {
      "extractNode": {
        "name": "apoc.refactor.extractNode([rel1,rel2,...], [labels],'OUT','IN') extract node from relationships\n",
        "description": "apoc.refactor.extractNode(relationships :: ANY?, labels :: LIST? OF STRING?, outType :: STRING?, inType :: STRING?) :: (input :: INTEGER?, output :: NODE?, error :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.extractNode/"
      },
      "rename": {
        "name": "apoc.refactor.rename.typeProperty(oldName, newName, [rels], \\{config}) | rename all relationship's property from 'oldName' to 'newName'. If 'rels' is provided renaming is applied to this set only\n",
        "description": "apoc.refactor.rename.typeProperty(oldName :: STRING?, newName :: STRING?, rels = [] :: LIST? OF RELATIONSHIP?, config = {} :: MAP?) :: (batches :: INTEGER?, total :: INTEGER?, timeTaken :: INTEGER?, committedOperations :: INTEGER?, failedOperations :: INTEGER?, failedBatches :: INTEGER?, retries :: INTEGER?, errorMessages :: MAP?, batch :: MAP?, operations :: MAP?, constraints :: LIST? OF STRING?, indexes :: LIST? OF STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.rename.typeProperty/"
      },
      "normalizeAsBoolean": {
        "name": "apoc.refactor.normalizeAsBoolean(entity, propertyKey, true_values, false_values) normalize/convert a property to be boolean\n",
        "description": "apoc.refactor.normalizeAsBoolean(entity :: ANY?, propertyKey :: STRING?, true_values :: LIST? OF ANY?, false_values :: LIST? OF ANY?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.normalizeAsBoolean/"
      },
      "categorize": {
        "name": "apoc.refactor.categorize(sourceKey, type, outgoing, label, targetKey, copiedKeys, batchSize) turn each unique propertyKey into a category node and connect to it\n",
        "description": "apoc.refactor.categorize(sourceKey :: STRING?, type :: STRING?, outgoing :: BOOLEAN?, label :: STRING?, targetKey :: STRING?, copiedKeys :: LIST? OF STRING?, batchSize :: INTEGER?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.categorize/"
      },
      "collapseNode": {
        "name": "apoc.refactor.collapseNode([node1,node2],'TYPE') collapse node to relationship, node with one rel becomes self-relationship\n",
        "description": "apoc.refactor.collapseNode(nodes :: ANY?, type :: STRING?) :: (input :: INTEGER?, output :: RELATIONSHIP?, error :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.collapseNode/"
      },
      "cloneSubgraph": {
        "name": "apoc.refactor.cloneSubgraph([node1,node2,...], [rel1,rel2,...]:[], {standinNodes:[], skipProperties:[]}) YIELD input, output, error | clone nodes with their labels and properties (optionally skipping any properties in the skipProperties list via the config map), and clone the given relationships (will exist between cloned nodes only). If no relationships are provided, all relationships between the given nodes will be cloned. Relationships can be optionally redirected according to standinNodes node pairings (this is a list of list-pairs of nodes), so given a node in the original subgraph (first of the pair), an existing node (second of the pair) can act as a standin for it within the cloned subgraph. Cloned relationships will be redirected to the standin.\n",
        "description": "apoc.refactor.cloneSubgraph(nodes :: LIST? OF NODE?, rels = [] :: LIST? OF RELATIONSHIP?, config = {} :: MAP?) :: (input :: INTEGER?, output :: NODE?, error :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.cloneSubgraph/"
      },
      "to": {
        "name": "apoc.refactor.to(rel, endNode) redirect relationship to use new end-node\n",
        "description": "apoc.refactor.to(relationship :: RELATIONSHIP?, newNode :: NODE?) :: (input :: INTEGER?, output :: RELATIONSHIP?, error :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.to/"
      },
      "cloneNodesWithRelationships": {
        "name": "apoc.refactor.cloneNodesWithRelationships([node1,node2,...]) clone nodes with their labels, properties and relationships\n",
        "description": "apoc.refactor.cloneNodesWithRelationships(nodes :: LIST? OF NODE?) :: (input :: INTEGER?, output :: NODE?, error :: STRING?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.cloneNodesWithRelationships/"
      },
      "setType": {
        "name": "apoc.refactor.setType(rel, 'NEW-TYPE') change relationship-type\n",
        "description": "apoc.refactor.setType(relationship :: RELATIONSHIP?, newType :: STRING?) :: (input :: INTEGER?, output :: RELATIONSHIP?, error :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.setType/"
      },
      "mergeRelationships": {
        "name": "apoc.refactor.mergeRelationships([rel1,rel2]) merge relationships onto first in list\n",
        "description": "apoc.refactor.mergeRelationships(rels :: LIST? OF RELATIONSHIP?, config = {} :: MAP?) :: (rel :: RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.mergeRelationships/"
      },
      "from": {
        "name": "apoc.refactor.from(rel, startNode) redirect relationship to use new start-node\n",
        "description": "apoc.refactor.from(relationship :: RELATIONSHIP?, newNode :: NODE?) :: (input :: INTEGER?, output :: RELATIONSHIP?, error :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.from/"
      },
      "invert": {
        "name": "apoc.refactor.invert(rel) inverts relationship direction\n",
        "description": "apoc.refactor.invert(relationship :: RELATIONSHIP?) :: (input :: INTEGER?, output :: RELATIONSHIP?, error :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.invert/"
      },
      "cloneSubgraphFromPaths": {
        "name": "apoc.refactor.cloneSubgraphFromPaths([path1, path2, ...], {standinNodes:[], skipProperties:[]}) YIELD input, output, error | from the subgraph formed from the given paths, clone nodes with their labels and properties (optionally skipping any properties in the skipProperties list via the config map), and clone the relationships (will exist between cloned nodes only). Relationships can be optionally redirected according to standinNodes node pairings (this is a list of list-pairs of nodes), so given a node in the original subgraph (first of the pair), an existing node (second of the pair) can act as a standin for it within the cloned subgraph. Cloned relationships will be redirected to the standin.\n",
        "description": "apoc.refactor.cloneSubgraphFromPaths(paths :: LIST? OF PATH?, config = {} :: MAP?) :: (input :: INTEGER?, output :: NODE?, error :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.cloneSubgraphFromPaths/"
      },
      "deleteAndReconnect": {
        "name": "apoc.refactor.deleteAndReconnect([pathLinkedList], [nodesToRemove], \\{config}) - Removes some nodes from a linked list\n",
        "description": "apoc.refactor.deleteAndReconnect(path :: PATH?, nodes :: LIST? OF NODE?, config = {} :: MAP?) :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.deleteAndReconnect/"
      },
      "mergeNodes": {
        "name": "apoc.refactor.mergeNodes([node1,node2],[{properties:'overwrite' or 'discard' or 'combine'}]) merge nodes onto first in list\n",
        "description": "apoc.refactor.mergeNodes(nodes :: LIST? OF NODE?, config = {} :: MAP?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.mergeNodes/"
      },
      "cloneNodes": {
        "name": "apoc.refactor.cloneNodes([node1,node2,...]) clone nodes with their labels and properties\n",
        "description": "apoc.refactor.cloneNodes(nodes :: LIST? OF NODE?, withRelationships = false :: BOOLEAN?, skipProperties = [] :: LIST? OF STRING?) :: (input :: INTEGER?, output :: NODE?, error :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/apoc.refactor.cloneNodes/"
      }
    },
    "create": {
      "vRelationship": {
        "name": "apoc.create.vRelationship(nodeFrom,'KNOWS',{key:value,...}, nodeTo) returns a virtual relationship\n",
        "description": "apoc.create.vRelationship(from :: NODE?, relType :: STRING?, props :: MAP?, to :: NODE?) :: (RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.vRelationship/"
      },
      "nodes": {
        "name": "apoc.create.nodes(['Label'], [{key:value,...}]) create multiple nodes with dynamic labels\n",
        "description": "apoc.create.nodes(label :: LIST? OF STRING?, props :: LIST? OF MAP?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.nodes/"
      },
      "vPattern": {
        "name": "apoc.create.vPattern({_labels:['LabelA'],key:value},'KNOWS',{key:value,...}, {_labels:['LabelB'],key:value}) returns a virtual pattern\n",
        "description": "apoc.create.vPattern(from :: MAP?, relType :: STRING?, props :: MAP?, to :: MAP?) :: (from :: NODE?, rel :: RELATIONSHIP?, to :: NODE?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.vPattern/"
      },
      "setRelProperty": {
        "name": "apoc.create.setRelProperty( [rel,id,ids,rels], key, value) - sets the given property on the relationship(s)\n",
        "description": "apoc.create.setRelProperty(relationships :: ANY?, key :: STRING?, value :: ANY?) :: (rel :: RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.setRelProperty/"
      },
      "setProperties": {
        "name": "apoc.create.setProperties( [node,id,ids,nodes], [keys], [values]) - sets the given properties on the nodes(s)\n",
        "description": "apoc.create.setProperties(nodes :: ANY?, keys :: LIST? OF STRING?, values :: LIST? OF ANY?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.setProperties/"
      },
      "uuids": {
        "name": "apoc.create.uuids(count) yield uuid - creates 'count' UUIDs\n",
        "description": "apoc.create.uuids(count :: INTEGER?) :: (row :: INTEGER?, uuid :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.uuids/"
      },
      "vNodes": {
        "name": "apoc.create.vNodes(['Label'], [{key:value,...}]) returns virtual nodes\n",
        "description": "apoc.create.vNodes(label :: LIST? OF STRING?, props :: LIST? OF MAP?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.vNodes/"
      },
      "setLabels": {
        "name": "apoc.create.setLabels( [node,id,ids,nodes], ['Label',...]) - sets the given labels, non matching labels are removed on the node or nodes\n",
        "description": "apoc.create.setLabels(nodes :: ANY?, label :: LIST? OF STRING?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.setLabels/"
      },
      "uuid": {
        "name": "apoc.create.uuid() - creates an UUID\n",
        "description": "apoc.create.uuid() :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.uuid/"
      },
      "node": {
        "name": "apoc.create.node(['Label'], {key:value,...}) - create node with dynamic labels\n",
        "description": "apoc.create.node(label :: LIST? OF STRING?, props :: MAP?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.node/"
      },
      "virtual": {
        "name": "apoc.create.virtual.fromNode(node, [propertyNames]) returns a virtual node built from an existing node with only the requested properties\n",
        "description": "apoc.create.virtual.fromNode(node :: NODE?, propertyNames :: LIST? OF STRING?) :: (NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.virtual.fromNode/"
      },
      "removeLabels": {
        "name": "apoc.create.removeLabels( [node,id,ids,nodes], ['Label',...]) - removes the given labels from the node or nodes\n",
        "description": "apoc.create.removeLabels(nodes :: ANY?, label :: LIST? OF STRING?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.removeLabels/"
      },
      "setRelProperties": {
        "name": "apoc.create.setRelProperties( [rel,id,ids,rels], [keys], [values]) - sets the given properties on the relationship(s)\n",
        "description": "apoc.create.setRelProperties(rels :: ANY?, keys :: LIST? OF STRING?, values :: LIST? OF ANY?) :: (rel :: RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.setRelProperties/"
      },
      "virtualPath": {
        "name": "apoc.create.virtualPath(['LabelA'],{key:value},'KNOWS',{key:value,...},['LabelB'],{key:value}) returns a virtual path of nodes joined by a relationship and the associated properties\n",
        "description": "apoc.create.virtualPath(labelsN :: LIST? OF STRING?, n :: MAP?, relType :: STRING?, props :: MAP?, labelsM :: LIST? OF STRING?, m :: MAP?) :: (from :: NODE?, rel :: RELATIONSHIP?, to :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.virtualPath/"
      },
      "relationship": {
        "name": "apoc.create.relationship(person1,'KNOWS',{key:value,...}, person2) create relationship with dynamic rel-type\n",
        "description": "apoc.create.relationship(from :: NODE?, relType :: STRING?, props :: MAP?, to :: NODE?) :: (rel :: RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.relationship/"
      },
      "removeProperties": {
        "name": "apoc.create.removeProperties( [node,id,ids,nodes], [keys]) - removes the given properties from the nodes(s)\n",
        "description": "apoc.create.removeProperties(nodes :: ANY?, keys :: LIST? OF STRING?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.removeProperties/"
      },
      "removeRelProperties": {
        "name": "apoc.create.removeRelProperties( [rel,id,ids,rels], [keys]) - removes the given properties from the relationship(s)\n",
        "description": "apoc.create.removeRelProperties(rels :: ANY?, keys :: LIST? OF STRING?) :: (rel :: RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.removeRelProperties/"
      },
      "addLabels": {
        "name": "apoc.create.addLabels( [node,id,ids,nodes], ['Label',...]) - adds the given labels to the node or nodes\n",
        "description": "apoc.create.addLabels(nodes :: ANY?, label :: LIST? OF STRING?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.addLabels/"
      },
      "vPatternFull": {
        "name": "apoc.create.vPatternFull(['LabelA'],{key:value},'KNOWS',{key:value,...},['LabelB'],{key:value}) returns a virtual pattern\n",
        "description": "apoc.create.vPatternFull(labelsN :: LIST? OF STRING?, n :: MAP?, relType :: STRING?, props :: MAP?, labelsM :: LIST? OF STRING?, m :: MAP?) :: (from :: NODE?, rel :: RELATIONSHIP?, to :: NODE?)\n",
        "deprecated": true,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.vPatternFull/"
      },
      "vNode": {
        "name": "apoc.create.vNode(['Label'], {key:value,...}) returns a virtual node\n",
        "description": "apoc.create.vNode(label :: LIST? OF STRING?, props = {} :: MAP?) :: (NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.vNode/"
      },
      "setProperty": {
        "name": "apoc.create.setProperty( [node,id,ids,nodes], key, value) - sets the given property on the node(s)\n",
        "description": "apoc.create.setProperty(nodes :: ANY?, key :: STRING?, value :: ANY?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.create/apoc.create.setProperty/"
      }
    },
    "import": {
      "json": {
        "name": "apoc.import.json(file,config) - imports the json list to the provided file\n",
        "description": "apoc.import.json(file :: STRING?, config = {} :: MAP?) :: (file :: STRING?, source :: STRING?, format :: STRING?, nodes :: INTEGER?, relationships :: INTEGER?, properties :: INTEGER?, time :: INTEGER?, rows :: INTEGER?, batchSize :: INTEGER?, batches :: INTEGER?, done :: BOOLEAN?, data :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.import/apoc.import.json/"
      },
      "xml": {
        "name": "apoc.import.xml(file,config) - imports graph from provided file\n",
        "description": "apoc.import.xml(url :: STRING?, config = {} :: MAP?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.import/apoc.import.xml/"
      },
      "csv": {
        "name": "apoc.import.csv(nodes, relationships, config) - imports nodes and relationships from the provided CSV files with given labels and types\n",
        "description": "apoc.import.csv(nodes :: LIST? OF MAP?, relationships :: LIST? OF MAP?, config :: MAP?) :: (file :: STRING?, source :: STRING?, format :: STRING?, nodes :: INTEGER?, relationships :: INTEGER?, properties :: INTEGER?, time :: INTEGER?, rows :: INTEGER?, batchSize :: INTEGER?, batches :: INTEGER?, done :: BOOLEAN?, data :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.import/apoc.import.csv/"
      },
      "graphml": {
        "name": "apoc.import.graphml(file,config) - imports graphml file\n",
        "description": "apoc.import.graphml(file :: STRING?, config :: MAP?) :: (file :: STRING?, source :: STRING?, format :: STRING?, nodes :: INTEGER?, relationships :: INTEGER?, properties :: INTEGER?, time :: INTEGER?, rows :: INTEGER?, batchSize :: INTEGER?, batches :: INTEGER?, done :: BOOLEAN?, data :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.import/apoc.import.graphml/"
      }
    },
    "ttl": {
      "expireIn": {
        "name": "CALL apoc.ttl.expireIn(node,timeDelta,'time-unit') - expire node after specified length of time time by setting :TTL label and `ttl` property\n",
        "description": "apoc.ttl.expireIn(node :: NODE?, timeDelta :: INTEGER?, timeUnit :: STRING?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.ttl/apoc.ttl.expireIn/"
      },
      "expire": {
        "name": "CALL apoc.ttl.expire(node,time,'time-unit') - expire node at specified time by setting :TTL label and `ttl` property\n",
        "description": "apoc.ttl.expire(node :: NODE?, time :: INTEGER?, timeUnit :: STRING?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.ttl/apoc.ttl.expire/"
      },
      "config": {
        "name": "apoc.ttl.config() :: (MAP?)\n----",
        "description": "",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.ttl/apoc.ttl.config/"
      }
    },
    "warmup": {
      "run": {
        "name": "apoc.warmup.run(loadProperties=false,loadDynamicProperties=false,loadIndexes=false) - quickly loads all nodes and rels into memory by skipping one page at a time\n",
        "description": "apoc.warmup.run(loadProperties = false :: BOOLEAN?, loadDynamicProperties = false :: BOOLEAN?, loadIndexes = false :: BOOLEAN?) :: (pageSize :: INTEGER?, totalTime :: INTEGER?, transactionWasTerminated :: BOOLEAN?, nodesPerPage :: INTEGER?, nodesTotal :: INTEGER?, nodePages :: INTEGER?, nodesTime :: INTEGER?, relsPerPage :: INTEGER?, relsTotal :: INTEGER?, relPages :: INTEGER?, relsTime :: INTEGER?, relGroupsPerPage :: INTEGER?, relGroupsTotal :: INTEGER?, relGroupPages :: INTEGER?, relGroupsTime :: INTEGER?, propertiesLoaded :: BOOLEAN?, dynamicPropertiesLoaded :: BOOLEAN?, propsPerPage :: INTEGER?, propRecordsTotal :: INTEGER?, propPages :: INTEGER?, propsTime :: INTEGER?, stringPropsPerPage :: INTEGER?, stringPropRecordsTotal :: INTEGER?, stringPropPages :: INTEGER?, stringPropsTime :: INTEGER?, arrayPropsPerPage :: INTEGER?, arrayPropRecordsTotal :: INTEGER?, arrayPropPages :: INTEGER?, arrayPropsTime :: INTEGER?, indexesLoaded :: BOOLEAN?, indexPages :: INTEGER?, indexTime :: INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.warmup/apoc.warmup.run/"
      }
    },
    "nodes": {
      "collapse": {
        "name": "apoc.nodes.collapse([nodes...],[{properties:'overwrite' or 'discard' or 'combine'}]) yield from, rel, to merge nodes onto first in list\n",
        "description": "apoc.nodes.collapse(nodes :: LIST? OF NODE?, config = {} :: MAP?) :: (from :: NODE?, rel :: RELATIONSHIP?, to :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.nodes/apoc.nodes.collapse/"
      },
      "isDense": {
        "name": "apoc.nodes.isDense(node) - returns true if it is a dense node\n",
        "description": "apoc.nodes.isDense(node :: NODE?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.nodes/apoc.nodes.isDense/"
      },
      "link": {
        "name": "apoc.nodes.link([nodes],'REL_TYPE') - creates a linked list of nodes from first to last\n",
        "description": "apoc.nodes.link(nodes :: LIST? OF NODE?, type :: STRING?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.nodes/apoc.nodes.link/"
      },
      "get": {
        "name": "apoc.nodes.get(node|nodes|id|[ids]) - quickly returns all nodes with these ids\n",
        "description": "apoc.nodes.get(nodes :: ANY?) :: (node :: NODE?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.nodes/apoc.nodes.get/"
      },
      "rels": {
        "name": "apoc.get.rels(rel|id|[ids]) - quickly returns all relationships with these ids\n",
        "description": "apoc.nodes.rels(relationships :: ANY?) :: (rel :: RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.nodes/apoc.nodes.rels/"
      },
      "relationship": {
        "name": "apoc.nodes.relationship.types(node|nodes|id|[ids], rel-direction-pattern) - returns a list of maps where each one has two fields: `node` which is the node subject of the analysis and `types` which is a list of distinct relationship types\n",
        "description": "apoc.nodes.relationship.types(ids :: ANY?, types =  :: STRING?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.nodes/apoc.nodes.relationship.types/"
      },
      "connected": {
        "name": "apoc.nodes.connected(start, end, rel-direction-pattern) - returns true when the node is connected to the other node, optimized for dense nodes\n",
        "description": "apoc.nodes.connected(start :: NODE?, start :: NODE?, types =  :: STRING?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.nodes/apoc.nodes.connected/"
      },
      "delete": {
        "name": "apoc.nodes.delete(node|nodes|id|[ids]) - quickly delete all nodes with these ids\n",
        "description": "apoc.nodes.delete(nodes :: ANY?, batchSize :: INTEGER?) :: (value :: INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.nodes/apoc.nodes.delete/"
      },
      "group": {
        "name": "apoc.nodes.group(labels :: LIST? OF STRING?, groupByProperties :: LIST? OF STRING?, aggregations = [{*=count}, {*=count}] :: LIST? OF MAP?, config = {} :: MAP?) :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?, node :: NODE?, relationship :: RELATIONSHIP?)\n----",
        "description": "",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.nodes/apoc.nodes.group/"
      },
      "relationships": {
        "name": "apoc.nodes.relationships.exist(node|nodes|id|[ids], rel-direction-pattern) - returns a list of maps where each one has two fields: `node` which is the node subject of the analysis and `exists` which is a map with rel-pattern, boolean for the given relationship patterns\n",
        "description": "apoc.nodes.relationships.exist(ids :: ANY?, types =  :: STRING?) :: (LIST? OF ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.nodes/apoc.nodes.relationships.exist/"
      }
    },
    "help": {
      "undefined": {
        "name": "Provides descriptions of available procedures. To narrow the results, supply a search string. To also search in the description text, append + to the end of the search string.\n",
        "description": "apoc.help(proc :: STRING?) :: (type :: STRING?, name :: STRING?, text :: STRING?, signature :: STRING?, roles :: LIST? OF STRING?, writes :: BOOLEAN?, core :: BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc/apoc.help/"
      }
    },
    "when": {
      "undefined": {
        "name": "apoc.when(condition, ifQuery, elseQuery:'', params:{}) yield value - based on the conditional, executes read-only ifQuery or elseQuery with the given parameters\n",
        "description": "apoc.when(condition :: BOOLEAN?, ifQuery :: STRING?, elseQuery =  :: STRING?, params = {} :: MAP?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc/apoc.when/"
      }
    },
    "case": {
      "undefined": {
        "name": "apoc.case([condition, query, condition, query, ...], elseQuery:'', params:{}) yield value - given a list of conditional / read-only query pairs, executes the query associated with the first conditional evaluating to true (or the else query if none are true) with the given parameters\n",
        "description": "apoc.case(conditionals :: LIST? OF ANY?, elseQuery =  :: STRING?, params = {} :: MAP?) :: (value :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc/apoc.case/"
      }
    },
    "version": {
      "undefined": {
        "name": "RETURN apoc.version() | return the current APOC installed version\n",
        "description": "apoc.version() :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc/apoc.version/"
      }
    },
    "graph": {
      "fromData": {
        "name": "apoc.graph.fromData([nodes],[relationships],'name',\\{properties}) | creates a virtual graph object for later processing\n",
        "description": "apoc.graph.fromData(nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?, name :: STRING?, properties :: MAP?) :: (graph :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.graph/apoc.graph.fromData/"
      },
      "from": {
        "name": "apoc.graph.from(data,'name',\\{properties}) | creates a virtual graph object for later processing it tries its best to extract the graph information from the data you pass in\n",
        "description": "apoc.graph.from(data :: ANY?, name :: STRING?, properties :: MAP?) :: (graph :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.graph/apoc.graph.from/"
      },
      "fromPath": {
        "name": "apoc.graph.fromPaths(path,'name',\\{properties}) - creates a virtual graph object for later processing\n",
        "description": "apoc.graph.fromPath(path :: PATH?, name :: STRING?, properties :: MAP?) :: (graph :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.graph/apoc.graph.fromPath/"
      },
      "validateDocument": {
        "name": "apoc.graph.validateDocument(\\{json}, \\{config}) yield row - validates the json, return the result of the validation\n",
        "description": "apoc.graph.validateDocument(json :: ANY?, config = {} :: MAP?) :: (row :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.graph/apoc.graph.validateDocument/"
      },
      "fromPaths": {
        "name": "apoc.graph.fromPaths([paths],'name',\\{properties}) - creates a virtual graph object for later processing\n",
        "description": "apoc.graph.fromPaths(paths :: LIST? OF PATH?, name :: STRING?, properties :: MAP?) :: (graph :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.graph/apoc.graph.fromPaths/"
      },
      "fromCypher": {
        "name": "apoc.graph.fromCypher('kernelTransaction',\\{params},'name',\\{properties}) - creates a virtual graph object for later processing\n",
        "description": "apoc.graph.fromCypher(kernelTransaction :: STRING?, params :: MAP?, name :: STRING?, properties :: MAP?) :: (graph :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.graph/apoc.graph.fromCypher/"
      },
      "fromDB": {
        "name": "apoc.graph.fromDB('name',\\{properties}) - creates a virtual graph object for later processing\n",
        "description": "apoc.graph.fromDB(name :: STRING?, properties :: MAP?) :: (graph :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.graph/apoc.graph.fromDB/"
      },
      "fromDocument": {
        "name": "apoc.graph.fromDocument(\\{json}, \\{config}) yield graph - transform JSON documents into graph structures\n",
        "description": "apoc.graph.fromDocument(json :: ANY?, config = {} :: MAP?) :: (graph :: MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.graph/apoc.graph.fromDocument/"
      }
    },
    "model": {
      "jdbc": {
        "name": "apoc.model.jdbc('key or url', {schema:'<schema>', write: <true/false>, filters: { tables:[], views: [], columns: []}) YIELD nodes, relationships - load schema from relational database\n",
        "description": "apoc.model.jdbc(jdbc :: STRING?, config = {} :: MAP?) :: (nodes :: LIST? OF NODE?, relationships :: LIST? OF RELATIONSHIP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.model/apoc.model.jdbc/"
      }
    },
    "util": {
      "validatePredicate": {
        "name": "apoc.util.validatePredicate(predicate, message, params) | if the predicate yields to true raise an exception else returns true, for use inside WHERE subclauses\n",
        "description": "apoc.util.validatePredicate(predicate :: BOOLEAN?, message :: STRING?, params :: LIST? OF ANY?) :: (BOOLEAN?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.util/apoc.util.validatePredicate/"
      },
      "sha1": {
        "name": "apoc.util.sha1([values]) | computes the sha1 of the concatenation of all string values of the list\n",
        "description": "apoc.util.sha1(values :: LIST? OF ANY?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.util/apoc.util.sha1/"
      },
      "sha256": {
        "name": "apoc.util.sha256([values]) | computes the sha256 of the concatenation of all string values of the list\n",
        "description": "apoc.util.sha256(values :: LIST? OF ANY?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.util/apoc.util.sha256/"
      },
      "sha512": {
        "name": "apoc.util.sha512([values]) | computes the sha512 of the concatenation of all string values of the list\n",
        "description": "apoc.util.sha512(values :: LIST? OF ANY?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.util/apoc.util.sha512/"
      },
      "compress": {
        "name": "apoc.util.compress(string, \\{config}) | return a compressed byte[] in various format from a string\n",
        "description": "apoc.util.compress(data :: STRING?, config = {} :: MAP?) :: (BYTEARRAY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.util/apoc.util.compress/"
      },
      "sleep": {
        "name": "apoc.util.sleep(<duration>) | sleeps for <duration> millis, transaction termination is honored\n",
        "description": "apoc.util.sleep(duration :: INTEGER?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.util/apoc.util.sleep/"
      },
      "sha384": {
        "name": "apoc.util.sha384([values]) | computes the sha384 of the concatenation of all string values of the list\n",
        "description": "apoc.util.sha384(values :: LIST? OF ANY?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.util/apoc.util.sha384/"
      },
      "validate": {
        "name": "apoc.util.validate(predicate, message, params) | if the predicate yields to true raise an exception\n",
        "description": "apoc.util.validate(predicate :: BOOLEAN?, message :: STRING?, params :: LIST? OF ANY?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.util/apoc.util.validate/"
      },
      "decompress": {
        "name": "apoc.util.decompress(compressed, \\{config}) | return a string from a compressed byte[] in various format\n",
        "description": "apoc.util.decompress(data :: BYTEARRAY?, config = {} :: MAP?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.util/apoc.util.decompress/"
      },
      "md5": {
        "name": "apoc.util.md5([values]) | computes the md5 of the concatenation of all string values of the list\n",
        "description": "apoc.util.md5(values :: LIST? OF ANY?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.util/apoc.util.md5/"
      }
    },
    "data": {
      "url": {
        "name": "apoc.data.url('url') as {protocol,host,port,path,query,file,anchor,user} | turn URL into map structure\n",
        "description": "apoc.data.url(url :: STRING?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.data/apoc.data.url/"
      },
      "domain": {
        "name": "apoc.data.domain('url_or_email_address') YIELD domain - extract the domain name from a url or an email address. If nothing was found, yield null.\n",
        "description": "apoc.data.domain(url_or_email_address :: STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.data/apoc.data.domain/"
      },
      "email": {
        "name": "apoc.data.email('email_address') as {personal,user,domain} - extract the personal name, user and domain as a map\n",
        "description": "apoc.data.email(email_address :: STRING?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.data/apoc.data.email/"
      }
    },
    "lock": {
      "nodes": {
        "name": "apoc.lock.nodes([nodes]) acquires a write lock on the given nodes\n",
        "description": "apoc.lock.nodes(nodes :: LIST? OF NODE?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.lock/apoc.lock.nodes/"
      },
      "read": {
        "name": "apoc.lock.read.nodes([nodes]) acquires a read lock on the given nodes\n",
        "description": "apoc.lock.read.nodes(nodes :: LIST? OF NODE?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.lock/apoc.lock.read.nodes/"
      },
      "rels": {
        "name": "apoc.lock.rels([relationships]) acquires a write lock on the given relationship\n",
        "description": "apoc.lock.rels(rels :: LIST? OF RELATIONSHIP?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.lock/apoc.lock.rels/"
      },
      "all": {
        "name": "apoc.lock.all([nodes],[relationships]) acquires a write lock on the given nodes and relationships\n",
        "description": "apoc.lock.all(nodes :: LIST? OF NODE?, rels :: LIST? OF RELATIONSHIP?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.lock/apoc.lock.all/"
      }
    },
    "hashing": {
      "fingerprinting": {
        "name": "calculate a checksum (md5) over a node or a relationship. This deals gracefully with array properties. Two identical entities do share the same hash.\n",
        "description": "apoc.hashing.fingerprinting(some object :: ANY?, conf = {} :: MAP?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.hashing/apoc.hashing.fingerprinting/"
      },
      "fingerprintGraph": {
        "name": "calculate a checksum (md5) over a the full graph. Be aware that this function does use in-memomry datastructures depending on the size of your graph.\n",
        "description": "apoc.hashing.fingerprintGraph(propertyExcludes = [] :: LIST? OF STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.hashing/apoc.hashing.fingerprintGraph/"
      },
      "fingerprint": {
        "name": "calculate a checksum (md5) over a node or a relationship. This deals gracefully with array properties. Two identical entities do share the same hash.\n",
        "description": "apoc.hashing.fingerprint(some object :: ANY?, propertyExcludes = [] :: LIST? OF STRING?) :: (STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.hashing/apoc.hashing.fingerprint/"
      }
    },
    "static": {
      "get": {
        "name": "apoc.static.get(name) - returns statically stored value from config (apoc.static.<key>) or server lifetime storage\n",
        "description": "apoc.static.get(key :: STRING?) :: (ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.static/apoc.static.get/"
      },
      "list": {
        "name": "apoc.static.list(prefix) - returns statically stored values from config (apoc.static.<prefix>.*) or server lifetime storage\n",
        "description": "apoc.static.list(prefix :: STRING?) :: (key :: STRING?, value :: ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.static/apoc.static.list/"
      },
      "getAll": {
        "name": "apoc.static.getAll(prefix) - returns statically stored values from config (apoc.static.<prefix>.*) or server lifetime storage\n",
        "description": "apoc.static.getAll(prefix :: STRING?) :: (MAP?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.static/apoc.static.getAll/"
      },
      "set": {
        "name": "apoc.static.set(name, value) - stores value under key for server lifetime storage, returns previously stored or configured value\n",
        "description": "apoc.static.set(key :: STRING?, value :: ANY?) :: (value :: ANY?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.static/apoc.static.set/"
      }
    },
    "log": {
      "debug": {
        "name": "apoc.log.debug(message, params) - logs debug message\n",
        "description": "apoc.log.debug(message :: STRING?, params = [] :: LIST? OF ANY?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.log/apoc.log.debug/"
      },
      "stream": {
        "name": "apoc.log.stream('neo4j.log', { last: n }) - retrieve log file contents, optionally return only the last n lines\n",
        "description": "apoc.log.stream(path :: STRING?, config = {} :: MAP?) :: (lineNo :: INTEGER?, line :: STRING?, path :: STRING?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.log/apoc.log.stream/"
      },
      "info": {
        "name": "apoc.log.info(message, params) - logs info message\n",
        "description": "apoc.log.info(message :: STRING?, params = [] :: LIST? OF ANY?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.log/apoc.log.info/"
      },
      "error": {
        "name": "apoc.log.error(message, params) - logs error message\n",
        "description": "apoc.log.error(message :: STRING?, params = [] :: LIST? OF ANY?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.log/apoc.log.error/"
      },
      "warn": {
        "name": "apoc.log.warn(message, params) - logs warn message\n",
        "description": "apoc.log.warn(message :: STRING?, params = [] :: LIST? OF ANY?) :: VOID\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.log/apoc.log.warn/"
      }
    },
    "bitwise": {
      "op": {
        "name": "apoc.bitwise.op(60,'|',13) bitwise operations a & b, a | b, a ^ b, ~a, a >> b, a >>> b, a << b. returns the result of the bitwise operation\n",
        "description": "apoc.bitwise.op(a :: INTEGER?, operator :: STRING?, b :: INTEGER?) :: (INTEGER?)\n",
        "deprecated": false,
        "link": "https://neo4j.com/labs/apoc/4.1/overview/apoc.bitwise/apoc.bitwise.op/"
      }
    }
  }
}